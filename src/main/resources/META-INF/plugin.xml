<!-- https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<!-- https://plugins.jetbrains.com/plugin/23120-jass/edit -->
<idea-plugin>
    <id>JASS</id>
    <name>JASS</name>
    <version>2.0.17</version>
    <idea-version since-build="2023.3"/>
    <vendor url="https://xgm.guru/p/wc3/IntelliJASS">XGM</vendor>

    <depends>com.intellij.modules.platform</depends>

    <extensions defaultExtensionNs="com.intellij">
        <!-- === JASS === -->
        <fileType name="JASS"
                  implementationClass="guru.xgm.jass.openapi.fileTypes.JassFileType"
                  fieldName="INSTANCE"
                  language="JASS"
                  extensions="j"
        />
        <lang.parserDefinition language="JASS" implementationClass="guru.xgm.jass.lang.JassParserDefinition"/>

        <!-- highlight -->
        <lang.syntaxHighlighterFactory language="JASS"
                                       implementationClass="guru.xgm.jass.openapi.fileTypes.JassSyntaxHighlighterFactory"/>

        <!-- color -->
        <colorSettingsPage implementation="guru.xgm.jass.openapi.options.colors.JassColorSettingsPage"/>
        <additionalTextAttributes scheme="Darcula" file="colorSchemes/JASSDarcula.xml"/>

        <!-- annotator -->
        <annotator language="JASS" implementationClass="guru.xgm.jass.lang.annotation.JassAnnotator"/>

        <!-- folding -->
        <lang.foldingBuilder language="JASS" implementationClass="guru.xgm.jass.lang.folding.JassCustomFoldingBuilder"/>
        <codeFoldingOptionsProvider instance="guru.xgm.jass.lang.folding.JassCodeFoldingOptionsProvider"/>
        <applicationService serviceImplementation="guru.xgm.jass.lang.folding.JassCodeFoldingSettings"/>

        <!-- formatter -->
        <lang.formatter language="JASS" implementationClass="guru.xgm.jass.formatting.JassFormattingModelBuilder"/>
        <langCodeStyleSettingsProvider
                implementation="guru.xgm.jass.psi.codeStyle.JassLanguageCodeStyleSettingsProvider"/>

        <!-- sdk -->
        <sdkType implementation="guru.xgm.jass.openapi.projectRoots.JassSdkType"/>

        <!-- inspections -->
        <localInspection language="JASS"
                         bundle="messages.JassInspectionsBundle"
                         key="operator.call.display.name"
                         groupPath="JASS"
                         groupBundle="messages.JassInspectionsBundle"
                         groupKey="group.names.operator"
                         enabledByDefault="true"
                         level="WARNING"
                         implementationClass="guru.xgm.jass.codeInspection.JassOperatorCallBehaviorInspection"
        />

        <!-- === ZINC === -->
        <fileType name="ZINC"
                  implementationClass="guru.xgm.zinc.openapi.fileTypes.ZincFileType"
                  fieldName="INSTANCE"
                  language="ZINC"
                  extensions="zn"
        />
        <lang.parserDefinition language="ZINC" implementationClass="guru.xgm.zinc.lang.ZincParserDefinition"/>

        <!-- highlight -->
        <lang.syntaxHighlighterFactory language="ZINC"
                                       implementationClass="guru.xgm.zinc.openapi.fileTypes.ZincSyntaxHighlighterFactory"/>

        <!-- formatter -->
        <lang.formatter language="ZINC" implementationClass="guru.xgm.zinc.formatting.ZincFormattingModelBuilder"/>
        <langCodeStyleSettingsProvider
                implementation="guru.xgm.zinc.psi.codeStyle.ZincLanguageCodeStyleSettingsProvider"/>

        <!-- annotator -->
        <annotator language="ZINC" implementationClass="guru.xgm.zinc.lang.annotation.ZincAnnotator"/>

        <!-- === VJASS === -->
        <fileType name="VJASS"
                  implementationClass="guru.xgm.vjass.openapi.fileTypes.VjassFileType"
                  fieldName="INSTANCE"
                  language="VJASS"
                  extensions="vj"
        />
        <lang.parserDefinition language="VJASS" implementationClass="guru.xgm.vjass.lang.VjassParserDefinition"/>

        <!-- highlight -->
        <lang.syntaxHighlighterFactory language="VJASS"
                                       implementationClass="guru.xgm.vjass.openapi.fileTypes.VjassSyntaxHighlighterFactory"/>

        <!-- === AngelScript === -->
        <fileType name="AngelScript"
                  implementationClass="guru.xgm.angelscript.openapi.fileTypes.AngelScriptFileType"
                  fieldName="INSTANCE"
                  language="AngelScript"
                  extensions="ass"
        />
        <lang.parserDefinition language="AngelScript"
                               implementationClass="guru.xgm.angelscript.lang.AngelScriptParserDefinition"/>

        <!-- highlight -->
        <lang.syntaxHighlighterFactory language="AngelScript"
                                       implementationClass="guru.xgm.angelscript.openapi.fileTypes.AngelScriptSyntaxHighlighterFactory"/>

        <!-- formatter -->
        <lang.formatter language="AngelScript"
                        implementationClass="guru.xgm.angelscript.formatting.AngelScriptFormattingModelBuilder"/>
        <langCodeStyleSettingsProvider
                implementation="guru.xgm.angelscript.psi.codeStyle.AngelScriptLanguageCodeStyleSettingsProvider"/>

        <!-- annotator -->
        <annotator language="AngelScript"
                   implementationClass="guru.xgm.angelscript.lang.annotation.AngelScriptAnnotator"/>

    </extensions>

    <!-- https://plugins.jetbrains.com/docs/intellij/basic-action-system.html#registering-actions-from-code -->
    <actions>
        <action
                id="guru.xgm.jass.openapi.actionSystem.convert.jass2angelscript.Jass2AngelScriptAction"
                class="guru.xgm.jass.openapi.actionSystem.convert.jass2angelscript.Jass2AngelScriptAction"
                text="Convert to AngelScript"
                description="Convert file to valid AngelScript"
        >
            <add-to-group group-id="EditorPopupMenu"/>
            <add-to-group group-id="ProjectViewPopupMenu"/>
        </action>
        <action
                id="guru.xgm.jass.openapi.actionSystem.convert.jass2lua.Jass2LuaAction"
                class="guru.xgm.jass.openapi.actionSystem.convert.jass2lua.Jass2LuaAction"
                text="Convert to Lua"
                description="Convert file to valid Lua"
        >
            <add-to-group group-id="EditorPopupMenu"/>
            <add-to-group group-id="ProjectViewPopupMenu"/>
        </action>
        <action
                id="guru.xgm.jass.openapi.actionSystem.convert.jass2javascript.Jass2JavaScriptAction"
                class="guru.xgm.jass.openapi.actionSystem.convert.jass2javascript.Jass2JavaScriptAction"
                text="Convert to JavaScript"
                description="Convert file to valid to JavaScript"
        >
            <add-to-group group-id="EditorPopupMenu"/>
            <add-to-group group-id="ProjectViewPopupMenu"/>
        </action>
        <action
                id="guru.xgm.jass.openapi.actionSystem.convert.jass2typescript.Jass2TypeScriptAction"
                class="guru.xgm.jass.openapi.actionSystem.convert.jass2typescript.Jass2TypeScriptAction"
                text="Convert to TypeScript"
                description="Convert file to valid to TypeScript"
        >
            <add-to-group group-id="EditorPopupMenu"/>
            <add-to-group group-id="ProjectViewPopupMenu"/>
        </action>
    </actions>

    <description><![CDATA[
        <p>Just Another Scripting Syntax (JASS) for
            <a href="https://en.wikipedia.org/wiki/Warcraft_III:_Reign_of_Chaos">Warcraft III</a>.</p>
        <p>Code folding, highlight and open binary ingame files.</p>
        ]]></description>

    <change-notes><![CDATA[
        <p>Add base VJASS parser for *.vj files.</p>
        ]]></change-notes>

</idea-plugin>
