// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _ZincLexer.flex

package guru.xgm.zinc.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static guru.xgm.zinc.psi.ZincTypes.*;


public class _ZincLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\0\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\11\22\1\0"+
    "\1\23\1\24\1\25\1\26\2\0\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\36\1\40"+
    "\1\41\1\42\1\43\1\44\2\36\1\45\1\46\1\47"+
    "\1\50\3\36\1\51\1\36\1\52\1\53\1\54\1\0"+
    "\1\36\1\0\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\2\36\1\66\1\36\1\67\1\70"+
    "\1\71\1\36\1\72\1\73\1\74\1\75\1\76\1\36"+
    "\1\77\1\100\1\36\1\101\1\102\1\103\7\0\1\104"+
    "\u01a2\0\2\104\326\0\u0100\104";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\5\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\2\12\1\13\1\14\1\15"+
    "\1\16\7\17\1\20\1\21\13\17\1\22\1\1\1\23"+
    "\1\24\1\0\1\25\1\0\1\26\1\27\1\0\1\30"+
    "\1\31\1\32\1\33\1\34\1\0\1\35\1\36\1\37"+
    "\15\17\1\40\7\17\1\41\1\33\2\17\1\42\1\17"+
    "\1\43\6\17\1\44\12\17\1\33\3\17\1\45\1\46"+
    "\1\17\1\47\1\17\1\50\7\17\1\51\2\17\1\52"+
    "\1\53\20\17\1\54\4\17\1\55\1\56\1\57\1\60"+
    "\1\61\2\17\1\62\1\63\1\64\1\65\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\105\0\105\0\105\0\105\0\105\0\u0228\0\u026d\0\u02b2"+
    "\0\u02f7\0\u033c\0\105\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495"+
    "\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\105\0\105\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u08e5\0\105\0\u092a\0\105\0\105\0\u0114\0\105"+
    "\0\u096f\0\u0159\0\105\0\u01e3\0\105\0\105\0\u026d\0\u09b4"+
    "\0\u09f9\0\u0159\0\105\0\105\0\105\0\u0a3e\0\u0a83\0\u0ac8"+
    "\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0"+
    "\0\u0d35\0\u0d7a\0\u0450\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\105\0\u0fa2\0\u0fe7\0\u102c\0\u0450\0\u1071"+
    "\0\u0450\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u0450"+
    "\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437"+
    "\0\u147c\0\u14c1\0\105\0\u1506\0\u154b\0\u1590\0\u0450\0\u0450"+
    "\0\u15d5\0\u0450\0\u161a\0\u0450\0\u165f\0\u16a4\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\u0450\0\u1842\0\u1887\0\u0450\0\u0450"+
    "\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf"+
    "\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7"+
    "\0\u0450\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u0450\0\u0450\0\u0450"+
    "\0\u0450\0\u0450\0\u1e30\0\u1e75\0\u0450\0\u0450\0\u0450\0\u0450"+
    "\0\u0450\0\u0450";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\3\27\1\30\1\27"+
    "\1\31\3\27\1\32\1\27\1\33\1\34\3\27\1\35"+
    "\2\27\1\36\1\2\1\37\1\27\1\40\1\41\1\27"+
    "\1\42\1\43\1\27\1\44\1\45\1\46\1\47\1\27"+
    "\1\50\1\51\1\52\5\27\1\53\1\54\1\55\1\2"+
    "\106\0\3\3\126\0\1\56\57\0\5\57\1\60\45\57"+
    "\1\61\31\57\21\0\2\62\4\0\6\62\20\0\6\62"+
    "\31\0\1\63\75\0\10\64\1\65\74\64\26\0\1\66"+
    "\77\0\2\67\75\0\1\70\4\0\1\71\103\0\1\67"+
    "\1\0\2\22\54\0\1\72\24\0\1\67\1\0\2\22"+
    "\107\0\1\73\104\0\1\74\104\0\1\75\100\0\2\27"+
    "\4\0\23\27\3\0\24\27\25\0\2\27\4\0\4\27"+
    "\1\76\16\27\3\0\24\27\25\0\2\27\4\0\1\77"+
    "\22\27\3\0\24\27\25\0\2\27\4\0\4\27\1\100"+
    "\16\27\3\0\24\27\25\0\2\27\4\0\10\27\1\101"+
    "\12\27\3\0\24\27\25\0\2\27\4\0\15\27\1\102"+
    "\3\27\1\103\1\27\3\0\24\27\25\0\2\27\4\0"+
    "\16\27\1\104\4\27\3\0\24\27\25\0\2\27\4\0"+
    "\23\27\3\0\13\27\1\105\10\27\25\0\2\27\4\0"+
    "\23\27\3\0\13\27\1\106\10\27\25\0\2\27\4\0"+
    "\23\27\3\0\11\27\1\107\12\27\25\0\2\27\4\0"+
    "\23\27\3\0\13\27\1\110\4\27\1\111\3\27\25\0"+
    "\2\27\4\0\23\27\3\0\1\112\23\27\25\0\2\27"+
    "\4\0\23\27\3\0\5\27\1\113\4\27\1\114\11\27"+
    "\25\0\2\27\4\0\23\27\3\0\10\27\1\115\13\27"+
    "\25\0\2\27\4\0\23\27\3\0\13\27\1\116\10\27"+
    "\25\0\2\27\4\0\23\27\3\0\15\27\1\117\2\27"+
    "\1\120\3\27\25\0\2\27\4\0\23\27\3\0\4\27"+
    "\1\121\17\27\25\0\2\27\4\0\23\27\3\0\17\27"+
    "\1\122\4\27\106\0\1\123\2\0\2\57\2\0\100\57"+
    "\1\0\13\70\1\124\71\70\2\71\1\0\102\71\21\0"+
    "\2\27\4\0\1\27\1\125\21\27\3\0\24\27\25\0"+
    "\2\27\4\0\12\27\1\126\10\27\3\0\24\27\25\0"+
    "\2\27\4\0\22\27\1\127\3\0\24\27\25\0\2\27"+
    "\4\0\14\27\1\130\6\27\3\0\24\27\25\0\2\27"+
    "\4\0\20\27\1\131\2\27\3\0\24\27\25\0\2\27"+
    "\4\0\12\27\1\132\10\27\3\0\24\27\25\0\2\27"+
    "\4\0\21\27\1\133\1\27\3\0\24\27\25\0\2\27"+
    "\4\0\23\27\3\0\13\27\1\134\10\27\25\0\2\27"+
    "\4\0\23\27\3\0\3\27\1\135\6\27\1\136\11\27"+
    "\25\0\2\27\4\0\23\27\3\0\16\27\1\137\5\27"+
    "\25\0\2\27\4\0\23\27\3\0\15\27\1\140\6\27"+
    "\25\0\2\27\4\0\23\27\3\0\12\27\1\141\11\27"+
    "\25\0\2\27\4\0\23\27\3\0\12\27\1\142\11\27"+
    "\25\0\2\27\4\0\23\27\3\0\17\27\1\143\4\27"+
    "\25\0\2\27\4\0\23\27\3\0\1\27\1\144\22\27"+
    "\25\0\2\27\4\0\23\27\3\0\17\27\1\145\4\27"+
    "\25\0\2\27\4\0\23\27\3\0\10\27\1\146\13\27"+
    "\25\0\2\27\4\0\23\27\3\0\1\27\1\147\22\27"+
    "\25\0\2\27\4\0\23\27\3\0\1\150\16\27\1\151"+
    "\4\27\25\0\2\27\4\0\23\27\3\0\15\27\1\152"+
    "\6\27\4\0\13\70\1\124\4\70\1\153\64\70\21\0"+
    "\2\27\4\0\21\27\1\154\1\27\3\0\24\27\25\0"+
    "\2\27\4\0\17\27\1\155\3\27\3\0\24\27\25\0"+
    "\2\27\4\0\21\27\1\156\1\27\3\0\24\27\25\0"+
    "\2\27\4\0\12\27\1\157\10\27\3\0\24\27\25\0"+
    "\2\27\4\0\4\27\1\160\16\27\3\0\24\27\25\0"+
    "\2\27\4\0\23\27\3\0\11\27\1\161\12\27\25\0"+
    "\2\27\4\0\23\27\3\0\4\27\1\162\17\27\25\0"+
    "\2\27\4\0\23\27\3\0\16\27\1\163\5\27\25\0"+
    "\2\27\4\0\23\27\3\0\4\27\1\164\17\27\25\0"+
    "\2\27\4\0\23\27\3\0\2\27\1\165\21\27\25\0"+
    "\2\27\4\0\23\27\3\0\3\27\1\166\20\27\25\0"+
    "\2\27\4\0\23\27\3\0\4\27\1\167\17\27\25\0"+
    "\2\27\4\0\23\27\3\0\15\27\1\170\6\27\25\0"+
    "\2\27\4\0\23\27\3\0\7\27\1\171\14\27\25\0"+
    "\2\27\4\0\23\27\3\0\21\27\1\172\2\27\25\0"+
    "\2\27\4\0\23\27\3\0\11\27\1\173\12\27\25\0"+
    "\2\27\4\0\23\27\3\0\11\27\1\174\12\27\25\0"+
    "\2\27\4\0\23\27\3\0\20\27\1\175\3\27\25\0"+
    "\2\27\4\0\23\27\3\0\10\27\1\176\13\27\25\0"+
    "\2\27\4\0\6\27\1\177\14\27\3\0\24\27\25\0"+
    "\2\27\4\0\4\27\1\200\16\27\3\0\24\27\25\0"+
    "\2\27\4\0\17\27\1\201\3\27\3\0\24\27\25\0"+
    "\2\27\4\0\23\27\3\0\4\27\1\202\17\27\25\0"+
    "\2\27\4\0\23\27\3\0\17\27\1\203\4\27\25\0"+
    "\2\27\4\0\23\27\3\0\17\27\1\204\4\27\25\0"+
    "\2\27\4\0\23\27\3\0\11\27\1\205\12\27\25\0"+
    "\2\27\4\0\23\27\3\0\6\27\1\206\15\27\25\0"+
    "\2\27\4\0\23\27\3\0\1\207\23\27\25\0\2\27"+
    "\4\0\23\27\3\0\10\27\1\210\13\27\25\0\2\27"+
    "\4\0\23\27\3\0\1\211\23\27\25\0\2\27\4\0"+
    "\23\27\3\0\10\27\1\212\13\27\25\0\2\27\4\0"+
    "\23\27\3\0\15\27\1\213\6\27\25\0\2\27\4\0"+
    "\23\27\3\0\12\27\1\214\11\27\25\0\2\27\4\0"+
    "\6\27\1\215\14\27\3\0\24\27\25\0\2\27\4\0"+
    "\23\27\3\0\1\216\23\27\25\0\2\27\4\0\23\27"+
    "\3\0\1\217\23\27\25\0\2\27\4\0\23\27\3\0"+
    "\10\27\1\220\13\27\25\0\2\27\4\0\23\27\3\0"+
    "\4\27\1\221\17\27\25\0\2\27\4\0\23\27\3\0"+
    "\4\27\1\222\17\27\25\0\2\27\4\0\23\27\3\0"+
    "\15\27\1\223\6\27\25\0\2\27\4\0\23\27\3\0"+
    "\12\27\1\224\11\27\25\0\2\27\4\0\23\27\3\0"+
    "\17\27\1\225\4\27\25\0\2\27\4\0\23\27\3\0"+
    "\2\27\1\226\21\27\25\0\2\27\4\0\23\27\3\0"+
    "\12\27\1\227\11\27\25\0\2\27\4\0\23\27\3\0"+
    "\6\27\1\230\15\27\25\0\2\27\4\0\20\27\1\231"+
    "\2\27\3\0\24\27\25\0\2\27\4\0\23\27\3\0"+
    "\12\27\1\232\11\27\25\0\2\27\4\0\23\27\3\0"+
    "\12\27\1\233\11\27\25\0\2\27\4\0\23\27\3\0"+
    "\13\27\1\234\10\27\25\0\2\27\4\0\23\27\3\0"+
    "\15\27\1\235\6\27\25\0\2\27\4\0\23\27\3\0"+
    "\23\27\1\236\25\0\2\27\4\0\23\27\3\0\6\27"+
    "\1\237\15\27\25\0\2\27\4\0\23\27\3\0\4\27"+
    "\1\240\17\27\25\0\2\27\4\0\23\27\3\0\17\27"+
    "\1\241\4\27\25\0\2\27\4\0\23\27\3\0\12\27"+
    "\1\242\11\27\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7866];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\5\11\5\1\1\11\12\1\2\11"+
    "\13\1\1\11\1\1\2\11\1\0\1\11\1\0\1\1"+
    "\1\11\1\0\2\11\3\1\1\0\3\11\25\1\1\11"+
    "\27\1\1\11\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _ZincLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ZincLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 56: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 57: break;
          case 3:
            { return LPAREN;
            }
          // fall through
          case 58: break;
          case 4:
            { return RPAREN;
            }
          // fall through
          case 59: break;
          case 5:
            { return MUL;
            }
          // fall through
          case 60: break;
          case 6:
            { return PLUS;
            }
          // fall through
          case 61: break;
          case 7:
            { return COMMA;
            }
          // fall through
          case 62: break;
          case 8:
            { return MINUS;
            }
          // fall through
          case 63: break;
          case 9:
            { return DIV;
            }
          // fall through
          case 64: break;
          case 10:
            { return INTVAL;
            }
          // fall through
          case 65: break;
          case 11:
            { return SEMI;
            }
          // fall through
          case 66: break;
          case 12:
            { return LT;
            }
          // fall through
          case 67: break;
          case 13:
            { return EQ;
            }
          // fall through
          case 68: break;
          case 14:
            { return GT;
            }
          // fall through
          case 69: break;
          case 15:
            { return ID;
            }
          // fall through
          case 70: break;
          case 16:
            { return LBRACK;
            }
          // fall through
          case 71: break;
          case 17:
            { return RBRACK;
            }
          // fall through
          case 72: break;
          case 18:
            { return LBRACE;
            }
          // fall through
          case 73: break;
          case 19:
            { return RBRACE;
            }
          // fall through
          case 74: break;
          case 20:
            { return NEQ;
            }
          // fall through
          case 75: break;
          case 21:
            { return STRVAL;
            }
          // fall through
          case 76: break;
          case 22:
            { return HEXVAL;
            }
          // fall through
          case 77: break;
          case 23:
            { return AND_AND;
            }
          // fall through
          case 78: break;
          case 24:
            { return RAWVAL;
            }
          // fall through
          case 79: break;
          case 25:
            { return MINUS_GT;
            }
          // fall through
          case 80: break;
          case 26:
            { return REALVAL;
            }
          // fall through
          case 81: break;
          case 27:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 82: break;
          case 28:
            { return SINGLE_LINE_COMMENT;
            }
          // fall through
          case 83: break;
          case 29:
            { return LT_EQ;
            }
          // fall through
          case 84: break;
          case 30:
            { return EQ_EQ;
            }
          // fall through
          case 85: break;
          case 31:
            { return GT_EQ;
            }
          // fall through
          case 86: break;
          case 32:
            { return IF;
            }
          // fall through
          case 87: break;
          case 33:
            { return OR_OR;
            }
          // fall through
          case 88: break;
          case 34:
            { return KEY;
            }
          // fall through
          case 89: break;
          case 35:
            { return NOT;
            }
          // fall through
          case 90: break;
          case 36:
            { return FOR;
            }
          // fall through
          case 91: break;
          case 37:
            { return NULL;
            }
          // fall through
          case 92: break;
          case 38:
            { return TRUE;
            }
          // fall through
          case 93: break;
          case 39:
            { return CODE;
            }
          // fall through
          case 94: break;
          case 40:
            { return ELSE;
            }
          // fall through
          case 95: break;
          case 41:
            { return REAL;
            }
          // fall through
          case 96: break;
          case 42:
            { return DEBUG;
            }
          // fall through
          case 97: break;
          case 43:
            { return FALSE;
            }
          // fall through
          case 98: break;
          case 44:
            { return HANDLE;
            }
          // fall through
          case 99: break;
          case 45:
            { return PUBLIC;
            }
          // fall through
          case 100: break;
          case 46:
            { return RETURN;
            }
          // fall through
          case 101: break;
          case 47:
            { return STRING;
            }
          // fall through
          case 102: break;
          case 48:
            { return MINUSGT;
            }
          // fall through
          case 103: break;
          case 49:
            { return BOOLEAN;
            }
          // fall through
          case 104: break;
          case 50:
            { return INTEGER;
            }
          // fall through
          case 105: break;
          case 51:
            { return LIBRARY;
            }
          // fall through
          case 106: break;
          case 52:
            { return NOTHING;
            }
          // fall through
          case 107: break;
          case 53:
            { return PRIVATE;
            }
          // fall through
          case 108: break;
          case 54:
            { return CONSTANT;
            }
          // fall through
          case 109: break;
          case 55:
            { return FUNCTION;
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
