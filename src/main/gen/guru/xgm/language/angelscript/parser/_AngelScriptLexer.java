// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: AngelScriptLexer.flex

package guru.xgm.language.angelscript.parser;

import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class _AngelScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\27\1\31\1\27\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\5\42"+
    "\5\43\1\44\5\43\1\45\1\46\1\47\1\43\1\50"+
    "\4\43\1\51\1\52\1\53\1\0\1\43\1\0\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\43\1\65\1\66\1\67\1\70\1\71\1\72\1\43"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\43\1\103\1\104\1\105\1\106\6\0\1\107\u01a2\0"+
    "\2\107\326\0\u0100\107";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\2\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\26\1\27\1\1\1\30\22\26\1\31\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\1\0\1\37\1\40"+
    "\1\0\1\41\1\0\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\0\1\54\1\55"+
    "\1\56\1\57\1\26\1\0\12\26\1\60\11\26\1\61"+
    "\1\62\4\26\1\63\14\26\1\64\1\50\1\51\1\26"+
    "\1\0\1\26\1\65\20\26\1\66\1\26\1\67\3\26"+
    "\1\70\1\26\1\71\1\72\1\26\1\73\4\26\1\74"+
    "\10\26\1\51\1\26\1\0\2\26\1\75\1\76\1\26"+
    "\1\77\1\26\1\100\3\26\1\101\14\26\1\102\1\26"+
    "\1\103\11\26\1\104\1\105\1\106\2\26\1\0\1\26"+
    "\1\107\1\110\1\111\1\112\4\26\1\113\1\114\1\115"+
    "\4\26\1\116\1\117\1\120\1\121\15\26\1\122\1\123"+
    "\1\124\1\0\2\26\1\125\4\26\1\126\6\26\1\127"+
    "\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\0"+
    "\1\26\1\137\2\26\1\140\1\26\1\141\2\26\1\142"+
    "\2\26\1\0\1\143\1\144\1\145\1\146\1\26\1\147"+
    "\1\150\1\26\1\0\1\151\1\152\1\0\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\110\0\u0168\0\u01b0"+
    "\0\u01f8\0\110\0\110\0\u0240\0\u0288\0\110\0\u02d0\0\u0318"+
    "\0\u0360\0\u03a8\0\u03f0\0\u0438\0\110\0\u0480\0\u04c8\0\u0510"+
    "\0\110\0\110\0\u0558\0\u05a0\0\110\0\u05e8\0\110\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870"+
    "\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0"+
    "\0\u0af8\0\110\0\u0b40\0\110\0\110\0\110\0\u0120\0\110"+
    "\0\u0b88\0\u0168\0\110\0\u01f8\0\110\0\u0bd0\0\110\0\110"+
    "\0\110\0\110\0\110\0\110\0\u0c18\0\u0c60\0\u0ca8\0\110"+
    "\0\u0168\0\110\0\110\0\110\0\110\0\u0cf0\0\u0d38\0\u0d80"+
    "\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u0558\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u1440\0\u0558\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0"+
    "\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\110\0\110"+
    "\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u0558\0\u1908\0\u1950\0\u1998"+
    "\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
    "\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u0558\0\u1d88\0\u0558"+
    "\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u0558\0\u0558\0\u1f38"+
    "\0\u0558\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u0558\0\u20a0\0\u20e8"+
    "\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\110\0\u22e0"+
    "\0\u2328\0\u2370\0\u23b8\0\u0558\0\u0558\0\u2400\0\u0558\0\u2448"+
    "\0\u0558\0\u2490\0\u24d8\0\u2520\0\u0558\0\u2568\0\u25b0\0\u25f8"+
    "\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u2838"+
    "\0\u2880\0\u0558\0\u28c8\0\u0558\0\u2910\0\u2958\0\u29a0\0\u29e8"+
    "\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u0558\0\u2b98\0\u0558"+
    "\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u0558\0\u0558\0\u0558\0\u0558"+
    "\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u0558\0\u0558\0\u0558\0\u2e20"+
    "\0\u2e68\0\u2eb0\0\u2ef8\0\u0558\0\u0558\0\u0558\0\u0558\0\u2f40"+
    "\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180"+
    "\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u0558\0\u0558\0\u0558\0\u32e8"+
    "\0\u3330\0\u3378\0\u0558\0\u33c0\0\u3408\0\u3450\0\u3498\0\u0558"+
    "\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u0558\0\u0558"+
    "\0\u0558\0\u0558\0\u0558\0\u0558\0\u0558\0\u0558\0\u3690\0\u36d8"+
    "\0\u0558\0\u3720\0\u3768\0\u0558\0\u37b0\0\u0558\0\u37f8\0\u3840"+
    "\0\u0558\0\u3888\0\u38d0\0\u3918\0\u0558\0\u0558\0\u0558\0\u0558"+
    "\0\u3960\0\u0558\0\u0558\0\u39a8\0\u39f0\0\u0558\0\u0558\0\u3a38"+
    "\0\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\7\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\5\33\1\34\2\33\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\3\33\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\2\33\1\62\1\63\1\64\1\65\1\2"+
    "\111\0\3\3\141\0\1\66\52\0\5\67\1\70\44\67"+
    "\1\71\35\67\22\0\10\72\7\0\2\72\11\0\6\72"+
    "\36\0\1\73\77\0\11\74\1\75\40\74\1\76\35\74"+
    "\35\0\1\77\67\0\1\100\17\0\1\101\71\0\1\102"+
    "\15\0\1\103\1\104\73\0\10\105\72\0\1\106\4\0"+
    "\1\107\13\0\1\110\72\0\1\105\1\0\10\23\47\0"+
    "\1\111\26\0\1\105\1\0\10\23\110\0\1\112\112\0"+
    "\1\113\107\0\1\114\107\0\1\115\74\0\10\33\7\0"+
    "\10\33\3\0\27\33\27\0\10\33\7\0\6\33\1\116"+
    "\1\33\3\0\27\33\57\0\1\117\57\0\10\33\7\0"+
    "\10\33\3\0\1\33\1\120\12\33\1\121\2\33\1\122"+
    "\2\33\1\123\4\33\27\0\10\33\7\0\10\33\3\0"+
    "\15\33\1\124\1\33\1\125\7\33\27\0\10\33\7\0"+
    "\10\33\3\0\1\126\11\33\1\127\2\33\1\130\11\33"+
    "\27\0\10\33\7\0\10\33\3\0\4\33\1\131\10\33"+
    "\1\132\11\33\27\0\10\33\7\0\10\33\3\0\12\33"+
    "\1\133\12\33\1\134\1\33\27\0\10\33\7\0\10\33"+
    "\3\0\1\135\7\33\1\136\1\33\1\137\2\33\1\140"+
    "\4\33\1\141\4\33\27\0\10\33\7\0\10\33\3\0"+
    "\4\33\1\142\22\33\27\0\10\33\7\0\10\33\3\0"+
    "\1\143\26\33\27\0\10\33\7\0\10\33\3\0\5\33"+
    "\1\144\6\33\1\145\12\33\27\0\10\33\7\0\10\33"+
    "\3\0\1\146\7\33\1\147\4\33\1\150\4\33\1\151"+
    "\4\33\27\0\10\33\7\0\10\33\3\0\17\33\1\152"+
    "\2\33\1\153\1\154\3\33\27\0\10\33\7\0\10\33"+
    "\3\0\17\33\1\155\7\33\27\0\10\33\7\0\10\33"+
    "\3\0\4\33\1\156\22\33\27\0\10\33\7\0\10\33"+
    "\3\0\4\33\1\157\2\33\1\160\11\33\1\161\2\33"+
    "\1\162\2\33\27\0\10\33\7\0\10\33\3\0\17\33"+
    "\1\163\7\33\27\0\10\33\7\0\10\33\3\0\10\33"+
    "\1\164\16\33\27\0\10\33\7\0\10\33\3\0\15\33"+
    "\1\165\11\33\27\0\10\33\7\0\10\33\3\0\7\33"+
    "\1\166\17\33\111\0\1\167\3\0\2\67\2\0\103\67"+
    "\1\0\2\74\2\0\103\74\23\0\10\105\25\0\1\170"+
    "\1\0\1\170\26\0\14\106\1\171\73\106\2\107\1\0"+
    "\105\107\22\0\10\33\7\0\4\33\1\172\3\33\3\0"+
    "\27\33\57\0\1\173\57\0\10\33\7\0\10\33\3\0"+
    "\20\33\1\174\6\33\27\0\10\33\7\0\10\33\3\0"+
    "\3\33\1\175\23\33\27\0\10\33\7\0\10\33\3\0"+
    "\17\33\1\176\7\33\27\0\10\33\7\0\10\33\3\0"+
    "\21\33\1\177\5\33\27\0\10\33\7\0\10\33\3\0"+
    "\15\33\1\200\11\33\27\0\10\33\7\0\10\33\3\0"+
    "\4\33\1\201\22\33\27\0\10\33\7\0\10\33\3\0"+
    "\20\33\1\202\6\33\27\0\10\33\7\0\10\33\3\0"+
    "\1\203\26\33\27\0\10\33\7\0\10\33\3\0\3\33"+
    "\1\204\10\33\1\205\12\33\27\0\10\33\7\0\10\33"+
    "\3\0\5\33\1\206\21\33\27\0\10\33\7\0\10\33"+
    "\3\0\22\33\1\207\4\33\27\0\10\33\7\0\10\33"+
    "\3\0\20\33\1\210\6\33\27\0\10\33\7\0\10\33"+
    "\3\0\16\33\1\211\2\33\1\212\5\33\27\0\10\33"+
    "\7\0\10\33\3\0\12\33\1\213\14\33\27\0\10\33"+
    "\7\0\10\33\3\0\14\33\1\214\12\33\27\0\10\33"+
    "\7\0\10\33\3\0\15\33\1\215\11\33\27\0\10\33"+
    "\7\0\10\33\3\0\17\33\1\216\7\33\27\0\10\33"+
    "\7\0\10\33\3\0\14\33\1\217\12\33\27\0\10\33"+
    "\7\0\10\33\3\0\21\33\1\220\5\33\27\0\10\33"+
    "\7\0\10\33\3\0\14\33\1\221\12\33\27\0\10\33"+
    "\7\0\10\33\3\0\2\33\1\222\12\33\1\223\3\33"+
    "\1\224\5\33\27\0\10\33\7\0\10\33\3\0\13\33"+
    "\1\225\13\33\27\0\10\33\7\0\10\33\3\0\12\33"+
    "\1\226\14\33\27\0\10\33\7\0\10\33\3\0\21\33"+
    "\1\227\5\33\27\0\10\33\7\0\10\33\3\0\12\33"+
    "\1\230\14\33\27\0\10\33\7\0\10\33\3\0\21\33"+
    "\1\231\5\33\27\0\10\33\7\0\10\33\3\0\4\33"+
    "\1\232\22\33\27\0\10\33\7\0\10\33\3\0\10\33"+
    "\1\233\4\33\1\234\11\33\27\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\235\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\236\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\1\237\26\33\27\0\10\33\7\0\10\33\3\0"+
    "\1\240\16\33\1\241\7\33\27\0\10\33\7\0\10\33"+
    "\3\0\10\33\1\242\16\33\27\0\10\33\7\0\10\33"+
    "\3\0\22\33\1\243\4\33\27\0\10\33\7\0\10\33"+
    "\3\0\14\33\1\244\12\33\27\0\10\33\7\0\10\33"+
    "\3\0\10\33\1\245\16\33\27\0\10\33\7\0\10\33"+
    "\3\0\10\33\1\246\16\33\5\0\14\106\1\171\4\106"+
    "\1\247\66\106\22\0\10\33\7\0\7\33\1\250\3\0"+
    "\27\33\17\0\1\251\117\0\10\33\7\0\10\33\3\0"+
    "\21\33\1\252\5\33\27\0\10\33\7\0\10\33\3\0"+
    "\1\253\26\33\27\0\10\33\7\0\10\33\3\0\15\33"+
    "\1\254\11\33\27\0\10\33\7\0\10\33\3\0\12\33"+
    "\1\255\14\33\27\0\10\33\7\0\10\33\3\0\1\256"+
    "\26\33\27\0\10\33\7\0\10\33\3\0\4\33\1\257"+
    "\22\33\27\0\10\33\7\0\10\33\3\0\20\33\1\260"+
    "\6\33\27\0\10\33\7\0\10\33\3\0\4\33\1\261"+
    "\22\33\27\0\10\33\7\0\10\33\3\0\20\33\1\262"+
    "\6\33\27\0\10\33\7\0\10\33\3\0\1\263\26\33"+
    "\27\0\10\33\7\0\10\33\3\0\1\33\1\264\25\33"+
    "\27\0\10\33\7\0\10\33\3\0\4\33\1\265\22\33"+
    "\27\0\10\33\7\0\10\33\3\0\12\33\1\266\14\33"+
    "\27\0\10\33\7\0\10\33\3\0\4\33\1\267\22\33"+
    "\27\0\10\33\7\0\10\33\3\0\20\33\1\270\6\33"+
    "\27\0\10\33\7\0\10\33\3\0\1\271\26\33\27\0"+
    "\10\33\7\0\10\33\3\0\1\272\26\33\27\0\10\33"+
    "\7\0\10\33\3\0\2\33\1\273\24\33\27\0\10\33"+
    "\7\0\10\33\3\0\3\33\1\274\23\33\27\0\10\33"+
    "\7\0\10\33\3\0\12\33\1\275\14\33\27\0\10\33"+
    "\7\0\10\33\3\0\22\33\1\276\4\33\27\0\1\33"+
    "\1\277\1\33\1\300\2\33\1\301\1\302\7\0\10\33"+
    "\3\0\27\33\27\0\10\33\7\0\10\33\3\0\4\33"+
    "\1\303\22\33\27\0\10\33\7\0\10\33\3\0\12\33"+
    "\1\304\14\33\27\0\10\33\7\0\10\33\3\0\17\33"+
    "\1\305\7\33\27\0\10\33\7\0\10\33\3\0\23\33"+
    "\1\306\3\33\27\0\10\33\7\0\10\33\3\0\16\33"+
    "\1\307\2\33\1\310\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\22\33\1\311\4\33\27\0\10\33\7\0\10\33"+
    "\3\0\17\33\1\312\7\33\27\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\313\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\10\33\1\314\16\33\27\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\315\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\4\33\1\316\22\33\27\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\317\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\3\33\1\320\23\33\27\0\10\33\7\0\10\33"+
    "\3\0\12\33\1\321\14\33\27\0\10\33\7\0\1\322"+
    "\7\33\3\0\27\33\25\0\1\323\111\0\10\33\7\0"+
    "\10\33\3\0\17\33\1\324\7\33\27\0\10\33\7\0"+
    "\10\33\3\0\26\33\1\325\27\0\10\33\7\0\10\33"+
    "\3\0\11\33\1\326\15\33\27\0\10\33\7\0\10\33"+
    "\3\0\20\33\1\327\6\33\27\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\330\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\22\33\1\331\4\33\27\0\10\33\7\0\10\33"+
    "\3\0\12\33\1\332\14\33\27\0\10\33\7\0\10\33"+
    "\3\0\10\33\1\333\16\33\27\0\10\33\7\0\10\33"+
    "\3\0\17\33\1\334\7\33\27\0\10\33\7\0\10\33"+
    "\3\0\4\33\1\335\22\33\27\0\10\33\7\0\10\33"+
    "\3\0\12\33\1\336\14\33\27\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\337\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\3\33\1\340\15\33\1\341\5\33\27\0\10\33"+
    "\7\0\10\33\3\0\12\33\1\342\14\33\27\0\10\33"+
    "\7\0\10\33\3\0\22\33\1\343\4\33\27\0\10\33"+
    "\7\0\10\33\3\0\21\33\1\344\5\33\27\0\6\33"+
    "\1\345\1\33\7\0\10\33\3\0\27\33\27\0\2\33"+
    "\1\346\5\33\7\0\10\33\3\0\27\33\27\0\4\33"+
    "\1\347\3\33\7\0\10\33\3\0\27\33\27\0\10\33"+
    "\7\0\10\33\3\0\20\33\1\350\6\33\27\0\10\33"+
    "\7\0\10\33\3\0\17\33\1\351\7\33\27\0\10\33"+
    "\7\0\10\33\3\0\1\352\26\33\27\0\10\33\7\0"+
    "\10\33\3\0\4\33\1\353\22\33\27\0\10\33\7\0"+
    "\10\33\3\0\4\33\1\354\22\33\27\0\10\33\7\0"+
    "\10\33\3\0\17\33\1\355\7\33\27\0\10\33\7\0"+
    "\10\33\3\0\4\33\1\356\22\33\27\0\10\33\7\0"+
    "\10\33\3\0\10\33\1\357\16\33\27\0\10\33\7\0"+
    "\10\33\3\0\14\33\1\360\12\33\27\0\10\33\7\0"+
    "\10\33\3\0\2\33\1\361\24\33\27\0\1\33\1\362"+
    "\1\33\1\363\2\33\1\364\1\365\7\0\10\33\3\0"+
    "\27\33\27\0\10\33\7\0\10\33\3\0\4\33\1\366"+
    "\22\33\27\0\10\33\7\0\3\33\1\367\4\33\3\0"+
    "\27\33\21\0\1\370\115\0\10\33\7\0\10\33\3\0"+
    "\1\371\26\33\27\0\10\33\7\0\10\33\3\0\12\33"+
    "\1\372\14\33\27\0\10\33\7\0\10\33\3\0\4\33"+
    "\1\373\22\33\27\0\10\33\7\0\10\33\3\0\2\33"+
    "\1\374\24\33\27\0\10\33\7\0\10\33\3\0\14\33"+
    "\1\375\12\33\27\0\10\33\7\0\10\33\3\0\4\33"+
    "\1\376\22\33\27\0\10\33\7\0\10\33\3\0\10\33"+
    "\1\377\16\33\27\0\10\33\7\0\10\33\3\0\4\33"+
    "\1\u0100\22\33\27\0\10\33\7\0\10\33\3\0\3\33"+
    "\1\u0101\23\33\27\0\10\33\7\0\10\33\3\0\16\33"+
    "\1\u0102\10\33\27\0\10\33\7\0\10\33\3\0\10\33"+
    "\1\u0103\16\33\27\0\10\33\7\0\10\33\3\0\21\33"+
    "\1\u0104\5\33\27\0\10\33\7\0\10\33\3\0\17\33"+
    "\1\u0105\7\33\27\0\10\33\7\0\10\33\3\0\2\33"+
    "\1\u0106\24\33\27\0\10\33\7\0\10\33\3\0\14\33"+
    "\1\u0107\12\33\27\0\10\33\7\0\10\33\3\0\3\33"+
    "\1\u0108\23\33\27\0\10\33\7\0\10\33\3\0\2\33"+
    "\1\u0109\24\33\27\0\10\33\7\0\10\33\3\0\6\33"+
    "\1\u010a\20\33\27\0\10\33\7\0\10\33\3\0\7\33"+
    "\1\u010b\17\33\27\0\6\33\1\u010c\1\33\7\0\10\33"+
    "\3\0\27\33\27\0\2\33\1\u010d\5\33\7\0\10\33"+
    "\3\0\27\33\27\0\4\33\1\u010e\3\33\7\0\10\33"+
    "\3\0\27\33\44\0\1\u010f\72\0\10\33\7\0\10\33"+
    "\3\0\2\33\1\u0110\24\33\27\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\u0111\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\10\33\1\u0112\16\33\27\0\10\33\7\0\10\33"+
    "\3\0\1\u0113\26\33\27\0\10\33\7\0\10\33\3\0"+
    "\5\33\1\u0114\21\33\27\0\10\33\7\0\10\33\3\0"+
    "\15\33\1\u0115\11\33\27\0\10\33\7\0\10\33\3\0"+
    "\4\33\1\u0116\22\33\27\0\10\33\7\0\10\33\3\0"+
    "\1\u0117\26\33\27\0\10\33\7\0\10\33\3\0\3\33"+
    "\1\u0118\23\33\27\0\10\33\7\0\10\33\3\0\4\33"+
    "\1\u0119\22\33\27\0\10\33\7\0\10\33\3\0\21\33"+
    "\1\u011a\5\33\27\0\10\33\7\0\10\33\3\0\21\33"+
    "\1\u011b\5\33\20\0\1\u011c\116\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\u011d\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\21\33\1\u011e\5\33\27\0\10\33\7\0\10\33"+
    "\3\0\12\33\1\u011f\14\33\27\0\10\33\7\0\10\33"+
    "\3\0\14\33\1\u0120\12\33\27\0\10\33\7\0\10\33"+
    "\3\0\2\33\1\u0121\24\33\27\0\10\33\7\0\10\33"+
    "\3\0\4\33\1\u0122\22\33\27\0\10\33\7\0\10\33"+
    "\3\0\26\33\1\u0123\27\0\10\33\7\0\10\33\3\0"+
    "\4\33\1\u0124\22\33\57\0\1\u0125\57\0\10\33\7\0"+
    "\10\33\3\0\4\33\1\u0126\22\33\27\0\10\33\7\0"+
    "\10\33\3\0\3\33\1\u0127\23\33\57\0\1\u0128\107\0"+
    "\1\u0129\35\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14976];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\2\11\2\1\1\11"+
    "\6\1\1\11\3\1\2\11\2\1\1\11\1\1\1\11"+
    "\22\1\1\11\1\1\3\11\1\0\1\11\1\0\1\1"+
    "\1\11\1\0\1\11\1\0\6\11\3\1\1\11\1\0"+
    "\4\11\1\1\1\0\47\1\2\11\2\1\1\0\53\1"+
    "\1\11\1\1\1\0\51\1\1\0\44\1\1\0\26\1"+
    "\1\0\14\1\1\0\10\1\1\0\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _AngelScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AngelScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 108: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 109: break;
          case 3:
            { return EXCL;
            }
          // fall through
          case 110: break;
          case 4:
            { return HASH;
            }
          // fall through
          case 111: break;
          case 5:
            { return AMP;
            }
          // fall through
          case 112: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 113: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 114: break;
          case 8:
            { return MUL;
            }
          // fall through
          case 115: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 116: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 117: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 118: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 119: break;
          case 13:
            { return DIV;
            }
          // fall through
          case 120: break;
          case 14:
            { return INTVAL;
            }
          // fall through
          case 121: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 122: break;
          case 16:
            { return SEMI;
            }
          // fall through
          case 123: break;
          case 17:
            { return LT;
            }
          // fall through
          case 124: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 125: break;
          case 19:
            { return GT;
            }
          // fall through
          case 126: break;
          case 20:
            { return QUEST;
            }
          // fall through
          case 127: break;
          case 21:
            { return AT;
            }
          // fall through
          case 128: break;
          case 22:
            { return ID;
            }
          // fall through
          case 129: break;
          case 23:
            { return LBRACK;
            }
          // fall through
          case 130: break;
          case 24:
            { return RBRACK;
            }
          // fall through
          case 131: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 132: break;
          case 26:
            { return VBAR;
            }
          // fall through
          case 133: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 134: break;
          case 28:
            { return TILDE;
            }
          // fall through
          case 135: break;
          case 29:
            { return NEQ;
            }
          // fall through
          case 136: break;
          case 30:
            { return STRING_DOUBLE;
            }
          // fall through
          case 137: break;
          case 31:
            { return HEXVAL;
            }
          // fall through
          case 138: break;
          case 32:
            { return AMP_AMP;
            }
          // fall through
          case 139: break;
          case 33:
            { return STRING_SINGLE;
            }
          // fall through
          case 140: break;
          case 34:
            { return MUL_EQ;
            }
          // fall through
          case 141: break;
          case 35:
            { return PLUS_PLUS;
            }
          // fall through
          case 142: break;
          case 36:
            { return PLUS_EQ;
            }
          // fall through
          case 143: break;
          case 37:
            { return MINUS_MINUS;
            }
          // fall through
          case 144: break;
          case 38:
            { return MINUS_EQ;
            }
          // fall through
          case 145: break;
          case 39:
            { return MINUS_GT;
            }
          // fall through
          case 146: break;
          case 40:
            { return REALVAL;
            }
          // fall through
          case 147: break;
          case 41:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 148: break;
          case 42:
            { return SINGLE_LINE_COMMENT;
            }
          // fall through
          case 149: break;
          case 43:
            { return DIV_EQ;
            }
          // fall through
          case 150: break;
          case 44:
            { return COLON_COLON;
            }
          // fall through
          case 151: break;
          case 45:
            { return LT_EQ;
            }
          // fall through
          case 152: break;
          case 46:
            { return EQ_EQ;
            }
          // fall through
          case 153: break;
          case 47:
            { return GT_EQ;
            }
          // fall through
          case 154: break;
          case 48:
            { return DO;
            }
          // fall through
          case 155: break;
          case 49:
            { return IF;
            }
          // fall through
          case 156: break;
          case 50:
            { return IN;
            }
          // fall through
          case 157: break;
          case 51:
            { return OR;
            }
          // fall through
          case 158: break;
          case 52:
            { return VBAR_VBAR;
            }
          // fall through
          case 159: break;
          case 53:
            { return AND;
            }
          // fall through
          case 160: break;
          case 54:
            { return FOR;
            }
          // fall through
          case 161: break;
          case 55:
            { return GET;
            }
          // fall through
          case 162: break;
          case 56:
            { return INT;
            }
          // fall through
          case 163: break;
          case 57:
            { return NIL;
            }
          // fall through
          case 164: break;
          case 58:
            { return NOT;
            }
          // fall through
          case 165: break;
          case 59:
            { return OUT;
            }
          // fall through
          case 166: break;
          case 60:
            { return SET;
            }
          // fall through
          case 167: break;
          case 61:
            { return AUTO;
            }
          // fall through
          case 168: break;
          case 62:
            { return BOOL;
            }
          // fall through
          case 169: break;
          case 63:
            { return CASE;
            }
          // fall through
          case 170: break;
          case 64:
            { return CODE;
            }
          // fall through
          case 171: break;
          case 65:
            { return ELSE;
            }
          // fall through
          case 172: break;
          case 66:
            { return INT8;
            }
          // fall through
          case 173: break;
          case 67:
            { return NULL;
            }
          // fall through
          case 174: break;
          case 68:
            { return TRUE;
            }
          // fall through
          case 175: break;
          case 69:
            { return UINT;
            }
          // fall through
          case 176: break;
          case 70:
            { return VOID;
            }
          // fall through
          case 177: break;
          case 71:
            { return ARRAY;
            }
          // fall through
          case 178: break;
          case 72:
            { return BREAK;
            }
          // fall through
          case 179: break;
          case 73:
            { return CLASS;
            }
          // fall through
          case 180: break;
          case 74:
            { return CONST;
            }
          // fall through
          case 181: break;
          case 75:
            { return FALSE;
            }
          // fall through
          case 182: break;
          case 76:
            { return FINAL;
            }
          // fall through
          case 183: break;
          case 77:
            { return FLOAT;
            }
          // fall through
          case 184: break;
          case 78:
            { return INOUT;
            }
          // fall through
          case 185: break;
          case 79:
            { return INT16;
            }
          // fall through
          case 186: break;
          case 80:
            { return INT32;
            }
          // fall through
          case 187: break;
          case 81:
            { return INT64;
            }
          // fall through
          case 188: break;
          case 82:
            { return UINT8;
            }
          // fall through
          case 189: break;
          case 83:
            { return WHILE;
            }
          // fall through
          case 190: break;
          case 84:
            { return STRVAL;
            }
          // fall through
          case 191: break;
          case 85:
            { return DOUBLE;
            }
          // fall through
          case 192: break;
          case 86:
            { return HANDLE;
            }
          // fall through
          case 193: break;
          case 87:
            { return RETURN;
            }
          // fall through
          case 194: break;
          case 88:
            { return SHARED;
            }
          // fall through
          case 195: break;
          case 89:
            { return STATIC;
            }
          // fall through
          case 196: break;
          case 90:
            { return STRING;
            }
          // fall through
          case 197: break;
          case 91:
            { return SWITCH;
            }
          // fall through
          case 198: break;
          case 92:
            { return UINT16;
            }
          // fall through
          case 199: break;
          case 93:
            { return UINT32;
            }
          // fall through
          case 200: break;
          case 94:
            { return UINT64;
            }
          // fall through
          case 201: break;
          case 95:
            { return DEFAULT;
            }
          // fall through
          case 202: break;
          case 96:
            { return FUNCDEF;
            }
          // fall through
          case 203: break;
          case 97:
            { return INCLUDE;
            }
          // fall through
          case 204: break;
          case 98:
            { return PRIVATE;
            }
          // fall through
          case 205: break;
          case 99:
            { return ABSTRACT;
            }
          // fall through
          case 206: break;
          case 100:
            { return EXPLICIT;
            }
          // fall through
          case 207: break;
          case 101:
            { return EXTERNAL;
            }
          // fall through
          case 208: break;
          case 102:
            { return FUNCTION;
            }
          // fall through
          case 209: break;
          case 103:
            { return OVERRIDE;
            }
          // fall through
          case 210: break;
          case 104:
            { return PROPERTY;
            }
          // fall through
          case 211: break;
          case 105:
            { return NAMESPACE;
            }
          // fall through
          case 212: break;
          case 106:
            { return PROTECTED;
            }
          // fall through
          case 213: break;
          case 107:
            { return STRING_BLOCK;
            }
          // fall through
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
