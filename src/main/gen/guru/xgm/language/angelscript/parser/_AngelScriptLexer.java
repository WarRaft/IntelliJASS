// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: AngelScriptLexer.flex

package guru.xgm.language.angelscript.parser;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static guru.xgm.language.angelscript.psi.AngelScriptTypes.*;


public class _AngelScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int RAWVAL_STATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\30\1\32\1\30\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\6\42\24\43"+
    "\1\44\1\45\1\46\1\47\1\43\1\0\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\43"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\43\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\43"+
    "\1\77\1\100\1\101\1\102\6\0\1\103\u01a2\0\2\103"+
    "\326\0\u0100\103";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\1\1\32\1\33\23\30"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\0"+
    "\1\43\1\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\0\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\0\1\71\1\72\12\30\1\73\12\30\1\74\1\75"+
    "\1\76\4\30\1\77\15\30\1\100\1\101\1\102\1\103"+
    "\1\57\1\60\1\104\1\105\1\106\1\0\1\30\1\107"+
    "\21\30\1\110\1\30\1\111\3\30\1\112\1\30\1\113"+
    "\1\114\1\30\1\115\4\30\1\116\10\30\1\117\1\60"+
    "\1\120\1\0\2\30\1\121\1\122\1\30\1\123\1\30"+
    "\1\124\3\30\1\125\1\126\14\30\1\127\1\30\1\130"+
    "\11\30\1\131\1\132\1\133\1\30\1\0\1\30\1\134"+
    "\1\135\1\136\1\137\4\30\1\140\1\141\1\142\4\30"+
    "\1\143\1\144\1\145\1\146\15\30\1\147\1\150\1\0"+
    "\2\30\1\151\4\30\1\152\6\30\1\153\1\154\1\155"+
    "\1\156\1\157\1\160\1\161\1\162\1\0\1\30\1\163"+
    "\2\30\1\164\1\30\1\165\2\30\1\166\2\30\1\0"+
    "\1\167\1\170\1\171\1\172\1\30\1\173\1\174\1\30"+
    "\1\0\1\175\1\176\1\0\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\210\0\u0198"+
    "\0\u01dc\0\u0220\0\210\0\210\0\210\0\u0264\0\u02a8\0\210"+
    "\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440\0\210\0\u0484"+
    "\0\u04c8\0\u050c\0\210\0\210\0\u0550\0\210\0\u0594\0\210"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4"+
    "\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\210\0\u0b28\0\210\0\210"+
    "\0\210\0\210\0\210\0\u0b6c\0\u0154\0\210\0\u0bb0\0\u0198"+
    "\0\210\0\210\0\210\0\u0bf4\0\210\0\210\0\210\0\210"+
    "\0\210\0\210\0\u0c38\0\u0c7c\0\u0cc0\0\210\0\u0198\0\210"+
    "\0\u0d04\0\210\0\210\0\210\0\u0d48\0\u0d8c\0\210\0\210"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac"+
    "\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc"+
    "\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u0550\0\u1364\0\u0550"+
    "\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u0550\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\210\0\210\0\210\0\210\0\210\0\u182c"+
    "\0\210\0\210\0\u1870\0\u18b4\0\u18f8\0\u0550\0\u193c\0\u1980"+
    "\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u0550"+
    "\0\u1dc0\0\u0550\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u0550"+
    "\0\u0550\0\u1f58\0\u0550\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u0550"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u0550\0\210\0\210\0\u22cc\0\u2310\0\u2354\0\u0550\0\u0550"+
    "\0\u2398\0\u0550\0\u23dc\0\u0550\0\u2420\0\u2464\0\u24a8\0\u0550"+
    "\0\u0550\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684"+
    "\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u0550\0\u281c\0\u0550"+
    "\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u2a80\0\u0550\0\u2ac4\0\u0550\0\u2b08\0\u2b4c\0\u2b90\0\u0550"+
    "\0\u0550\0\u0550\0\u0550\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u0550"+
    "\0\u0550\0\u0550\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u0550\0\u0550"+
    "\0\u0550\0\u0550\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u0550"+
    "\0\u0550\0\u3168\0\u31ac\0\u31f0\0\u0550\0\u3234\0\u3278\0\u32bc"+
    "\0\u3300\0\u0550\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498"+
    "\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550"+
    "\0\u34dc\0\u3520\0\u0550\0\u3564\0\u35a8\0\u0550\0\u35ec\0\u0550"+
    "\0\u3630\0\u3674\0\u0550\0\u36b8\0\u36fc\0\u3740\0\u0550\0\u0550"+
    "\0\u0550\0\u0550\0\u3784\0\u0550\0\u0550\0\u37c8\0\u380c\0\u0550"+
    "\0\u0550\0\u3850\0\210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\7\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\2\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\3\35\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\35\1\65\1\66\1\67\1\70"+
    "\1\3\12\71\1\72\71\71\105\0\3\4\136\0\1\73"+
    "\21\0\1\74\23\0\5\75\1\76\37\75\1\77\36\75"+
    "\23\0\10\100\7\0\1\100\5\0\6\100\64\0\1\101"+
    "\56\0\1\102\24\0\1\103\62\0\1\104\20\0\1\105"+
    "\63\0\1\106\17\0\1\107\65\0\1\110\15\0\1\111"+
    "\1\112\67\0\10\113\66\0\1\114\4\0\1\115\13\0"+
    "\1\116\66\0\1\113\1\0\10\25\42\0\1\117\27\0"+
    "\1\113\1\0\10\25\104\0\1\120\105\0\1\121\1\122"+
    "\103\0\1\123\103\0\1\124\1\125\67\0\10\35\7\0"+
    "\2\35\4\0\27\35\52\0\1\126\74\0\1\127\10\0"+
    "\1\130\57\0\10\35\7\0\2\35\4\0\1\35\1\131"+
    "\12\35\1\132\2\35\1\133\2\35\1\134\4\35\30\0"+
    "\10\35\7\0\2\35\4\0\15\35\1\135\1\35\1\136"+
    "\7\35\30\0\10\35\7\0\2\35\4\0\1\137\11\35"+
    "\1\140\2\35\1\141\11\35\30\0\10\35\7\0\2\35"+
    "\4\0\4\35\1\142\10\35\1\143\11\35\30\0\10\35"+
    "\7\0\2\35\4\0\12\35\1\144\1\35\1\145\10\35"+
    "\1\146\1\35\30\0\10\35\7\0\2\35\4\0\1\147"+
    "\7\35\1\150\1\35\1\151\2\35\1\152\4\35\1\153"+
    "\4\35\30\0\10\35\7\0\2\35\4\0\4\35\1\154"+
    "\22\35\30\0\10\35\7\0\2\35\4\0\1\155\26\35"+
    "\30\0\10\35\7\0\2\35\4\0\5\35\1\156\6\35"+
    "\1\157\3\35\1\160\6\35\30\0\10\35\7\0\2\35"+
    "\4\0\1\161\7\35\1\162\4\35\1\163\4\35\1\164"+
    "\4\35\30\0\10\35\7\0\2\35\4\0\17\35\1\165"+
    "\2\35\1\166\1\167\3\35\30\0\10\35\7\0\2\35"+
    "\4\0\17\35\1\170\7\35\30\0\10\35\7\0\2\35"+
    "\4\0\4\35\1\171\22\35\30\0\10\35\7\0\2\35"+
    "\4\0\4\35\1\172\2\35\1\173\11\35\1\174\2\35"+
    "\1\175\2\35\30\0\10\35\7\0\2\35\4\0\17\35"+
    "\1\176\7\35\30\0\10\35\7\0\2\35\4\0\10\35"+
    "\1\177\16\35\30\0\10\35\7\0\2\35\4\0\15\35"+
    "\1\200\11\35\30\0\10\35\7\0\2\35\4\0\7\35"+
    "\1\201\17\35\30\0\10\35\7\0\2\35\4\0\15\35"+
    "\1\202\11\35\43\0\1\203\41\0\1\204\73\0\1\205"+
    "\13\0\2\75\2\0\77\75\37\0\1\206\70\0\10\113"+
    "\20\0\1\207\1\0\1\207\26\0\15\114\1\210\66\114"+
    "\2\115\1\0\101\115\36\0\1\211\103\0\1\212\1\213"+
    "\111\0\1\214\61\0\10\35\7\0\2\35\4\0\20\35"+
    "\1\215\6\35\30\0\10\35\7\0\2\35\4\0\3\35"+
    "\1\216\23\35\30\0\10\35\7\0\2\35\4\0\17\35"+
    "\1\217\7\35\30\0\10\35\7\0\2\35\4\0\21\35"+
    "\1\220\5\35\30\0\10\35\7\0\2\35\4\0\15\35"+
    "\1\221\11\35\30\0\10\35\7\0\2\35\4\0\4\35"+
    "\1\222\22\35\30\0\10\35\7\0\2\35\4\0\20\35"+
    "\1\223\6\35\30\0\10\35\7\0\2\35\4\0\1\224"+
    "\26\35\30\0\10\35\7\0\2\35\4\0\3\35\1\225"+
    "\10\35\1\226\12\35\30\0\10\35\7\0\2\35\4\0"+
    "\5\35\1\227\21\35\30\0\10\35\7\0\2\35\4\0"+
    "\22\35\1\230\4\35\30\0\10\35\7\0\2\35\4\0"+
    "\20\35\1\231\6\35\30\0\10\35\7\0\2\35\4\0"+
    "\22\35\1\232\4\35\30\0\10\35\7\0\2\35\4\0"+
    "\16\35\1\233\2\35\1\234\5\35\30\0\10\35\7\0"+
    "\2\35\4\0\12\35\1\235\14\35\30\0\10\35\7\0"+
    "\2\35\4\0\14\35\1\236\12\35\30\0\10\35\7\0"+
    "\2\35\4\0\15\35\1\237\11\35\30\0\10\35\7\0"+
    "\2\35\4\0\17\35\1\240\7\35\30\0\10\35\7\0"+
    "\2\35\4\0\14\35\1\241\12\35\30\0\10\35\7\0"+
    "\2\35\4\0\21\35\1\242\5\35\30\0\10\35\7\0"+
    "\2\35\4\0\14\35\1\243\12\35\30\0\10\35\7\0"+
    "\2\35\4\0\2\35\1\244\12\35\1\245\3\35\1\246"+
    "\5\35\30\0\10\35\7\0\2\35\4\0\13\35\1\247"+
    "\13\35\30\0\10\35\7\0\2\35\4\0\12\35\1\250"+
    "\14\35\30\0\10\35\7\0\2\35\4\0\21\35\1\251"+
    "\5\35\30\0\10\35\7\0\2\35\4\0\12\35\1\252"+
    "\14\35\30\0\10\35\7\0\2\35\4\0\21\35\1\253"+
    "\5\35\30\0\10\35\7\0\2\35\4\0\4\35\1\254"+
    "\22\35\30\0\10\35\7\0\2\35\4\0\10\35\1\255"+
    "\4\35\1\256\11\35\30\0\10\35\7\0\2\35\4\0"+
    "\21\35\1\257\5\35\30\0\10\35\7\0\2\35\4\0"+
    "\21\35\1\260\5\35\30\0\10\35\7\0\2\35\4\0"+
    "\1\261\26\35\30\0\10\35\7\0\2\35\4\0\1\262"+
    "\16\35\1\263\7\35\30\0\10\35\7\0\2\35\4\0"+
    "\10\35\1\264\16\35\30\0\10\35\7\0\2\35\4\0"+
    "\22\35\1\265\4\35\30\0\10\35\7\0\2\35\4\0"+
    "\14\35\1\266\12\35\30\0\10\35\7\0\2\35\4\0"+
    "\10\35\1\267\16\35\30\0\10\35\7\0\2\35\4\0"+
    "\10\35\1\270\16\35\30\0\10\35\7\0\2\35\4\0"+
    "\17\35\1\271\7\35\5\0\15\114\1\210\4\114\1\272"+
    "\61\114\36\0\1\273\60\0\1\274\113\0\10\35\7\0"+
    "\2\35\4\0\21\35\1\275\5\35\30\0\10\35\7\0"+
    "\2\35\4\0\1\276\26\35\30\0\10\35\7\0\2\35"+
    "\4\0\15\35\1\277\11\35\30\0\10\35\7\0\2\35"+
    "\4\0\12\35\1\300\14\35\30\0\10\35\7\0\2\35"+
    "\4\0\1\301\26\35\30\0\10\35\7\0\2\35\4\0"+
    "\4\35\1\302\22\35\30\0\10\35\7\0\2\35\4\0"+
    "\20\35\1\303\6\35\30\0\10\35\7\0\2\35\4\0"+
    "\4\35\1\304\22\35\30\0\10\35\7\0\2\35\4\0"+
    "\20\35\1\305\6\35\30\0\10\35\7\0\2\35\4\0"+
    "\1\306\26\35\30\0\10\35\7\0\2\35\4\0\1\35"+
    "\1\307\25\35\30\0\10\35\7\0\2\35\4\0\4\35"+
    "\1\310\22\35\30\0\10\35\7\0\2\35\4\0\13\35"+
    "\1\311\13\35\30\0\10\35\7\0\2\35\4\0\12\35"+
    "\1\312\14\35\30\0\10\35\7\0\2\35\4\0\4\35"+
    "\1\313\22\35\30\0\10\35\7\0\2\35\4\0\20\35"+
    "\1\314\6\35\30\0\10\35\7\0\2\35\4\0\1\315"+
    "\26\35\30\0\10\35\7\0\2\35\4\0\1\316\26\35"+
    "\30\0\10\35\7\0\2\35\4\0\2\35\1\317\24\35"+
    "\30\0\10\35\7\0\2\35\4\0\3\35\1\320\23\35"+
    "\30\0\10\35\7\0\2\35\4\0\12\35\1\321\14\35"+
    "\30\0\10\35\7\0\2\35\4\0\22\35\1\322\4\35"+
    "\30\0\1\35\1\323\1\35\1\324\2\35\1\325\1\326"+
    "\7\0\2\35\4\0\27\35\30\0\10\35\7\0\2\35"+
    "\4\0\4\35\1\327\22\35\30\0\10\35\7\0\2\35"+
    "\4\0\12\35\1\330\14\35\30\0\10\35\7\0\2\35"+
    "\4\0\17\35\1\331\7\35\30\0\10\35\7\0\2\35"+
    "\4\0\23\35\1\332\3\35\30\0\10\35\7\0\2\35"+
    "\4\0\16\35\1\333\2\35\1\334\5\35\30\0\10\35"+
    "\7\0\2\35\4\0\22\35\1\335\4\35\30\0\10\35"+
    "\7\0\2\35\4\0\17\35\1\336\7\35\30\0\10\35"+
    "\7\0\2\35\4\0\21\35\1\337\5\35\30\0\10\35"+
    "\7\0\2\35\4\0\10\35\1\340\16\35\30\0\10\35"+
    "\7\0\2\35\4\0\21\35\1\341\5\35\30\0\10\35"+
    "\7\0\2\35\4\0\4\35\1\342\22\35\30\0\10\35"+
    "\7\0\2\35\4\0\21\35\1\343\5\35\30\0\10\35"+
    "\7\0\2\35\4\0\3\35\1\344\23\35\30\0\10\35"+
    "\7\0\2\35\4\0\12\35\1\345\14\35\26\0\1\346"+
    "\105\0\10\35\7\0\2\35\4\0\17\35\1\347\7\35"+
    "\30\0\10\35\7\0\2\35\4\0\26\35\1\350\30\0"+
    "\10\35\7\0\2\35\4\0\11\35\1\351\15\35\30\0"+
    "\10\35\7\0\2\35\4\0\20\35\1\352\6\35\30\0"+
    "\10\35\7\0\2\35\4\0\21\35\1\353\5\35\30\0"+
    "\10\35\7\0\2\35\4\0\22\35\1\354\4\35\30\0"+
    "\10\35\7\0\2\35\4\0\12\35\1\355\14\35\30\0"+
    "\10\35\7\0\2\35\4\0\10\35\1\356\16\35\30\0"+
    "\10\35\7\0\2\35\4\0\17\35\1\357\7\35\30\0"+
    "\10\35\7\0\2\35\4\0\4\35\1\360\22\35\30\0"+
    "\10\35\7\0\2\35\4\0\12\35\1\361\14\35\30\0"+
    "\10\35\7\0\2\35\4\0\21\35\1\362\5\35\30\0"+
    "\10\35\7\0\2\35\4\0\3\35\1\363\15\35\1\364"+
    "\5\35\30\0\10\35\7\0\2\35\4\0\12\35\1\365"+
    "\14\35\30\0\10\35\7\0\2\35\4\0\22\35\1\366"+
    "\4\35\30\0\10\35\7\0\2\35\4\0\21\35\1\367"+
    "\5\35\30\0\6\35\1\370\1\35\7\0\2\35\4\0"+
    "\27\35\30\0\2\35\1\371\5\35\7\0\2\35\4\0"+
    "\27\35\30\0\4\35\1\372\3\35\7\0\2\35\4\0"+
    "\27\35\30\0\10\35\7\0\2\35\4\0\20\35\1\373"+
    "\6\35\30\0\10\35\7\0\2\35\4\0\17\35\1\374"+
    "\7\35\30\0\10\35\7\0\2\35\4\0\1\375\26\35"+
    "\30\0\10\35\7\0\2\35\4\0\4\35\1\376\22\35"+
    "\30\0\10\35\7\0\2\35\4\0\4\35\1\377\22\35"+
    "\30\0\10\35\7\0\2\35\4\0\17\35\1\u0100\7\35"+
    "\30\0\10\35\7\0\2\35\4\0\4\35\1\u0101\22\35"+
    "\30\0\10\35\7\0\2\35\4\0\10\35\1\u0102\16\35"+
    "\30\0\10\35\7\0\2\35\4\0\14\35\1\u0103\12\35"+
    "\30\0\10\35\7\0\2\35\4\0\2\35\1\u0104\24\35"+
    "\30\0\1\35\1\u0105\1\35\1\u0106\2\35\1\u0107\1\u0108"+
    "\7\0\2\35\4\0\27\35\30\0\10\35\7\0\2\35"+
    "\4\0\4\35\1\u0109\22\35\22\0\1\u010a\111\0\10\35"+
    "\7\0\2\35\4\0\1\u010b\26\35\30\0\10\35\7\0"+
    "\2\35\4\0\12\35\1\u010c\14\35\30\0\10\35\7\0"+
    "\2\35\4\0\4\35\1\u010d\22\35\30\0\10\35\7\0"+
    "\2\35\4\0\2\35\1\u010e\24\35\30\0\10\35\7\0"+
    "\2\35\4\0\14\35\1\u010f\12\35\30\0\10\35\7\0"+
    "\2\35\4\0\4\35\1\u0110\22\35\30\0\10\35\7\0"+
    "\2\35\4\0\10\35\1\u0111\16\35\30\0\10\35\7\0"+
    "\2\35\4\0\4\35\1\u0112\22\35\30\0\10\35\7\0"+
    "\2\35\4\0\3\35\1\u0113\23\35\30\0\10\35\7\0"+
    "\2\35\4\0\16\35\1\u0114\10\35\30\0\10\35\7\0"+
    "\2\35\4\0\10\35\1\u0115\16\35\30\0\10\35\7\0"+
    "\2\35\4\0\21\35\1\u0116\5\35\30\0\10\35\7\0"+
    "\2\35\4\0\17\35\1\u0117\7\35\30\0\10\35\7\0"+
    "\2\35\4\0\2\35\1\u0118\24\35\30\0\10\35\7\0"+
    "\2\35\4\0\14\35\1\u0119\12\35\30\0\10\35\7\0"+
    "\2\35\4\0\3\35\1\u011a\23\35\30\0\10\35\7\0"+
    "\2\35\4\0\2\35\1\u011b\24\35\30\0\10\35\7\0"+
    "\2\35\4\0\6\35\1\u011c\20\35\30\0\10\35\7\0"+
    "\2\35\4\0\7\35\1\u011d\17\35\30\0\6\35\1\u011e"+
    "\1\35\7\0\2\35\4\0\27\35\30\0\2\35\1\u011f"+
    "\5\35\7\0\2\35\4\0\27\35\30\0\4\35\1\u0120"+
    "\3\35\7\0\2\35\4\0\27\35\45\0\1\u0121\66\0"+
    "\10\35\7\0\2\35\4\0\2\35\1\u0122\24\35\30\0"+
    "\10\35\7\0\2\35\4\0\21\35\1\u0123\5\35\30\0"+
    "\10\35\7\0\2\35\4\0\10\35\1\u0124\16\35\30\0"+
    "\10\35\7\0\2\35\4\0\1\u0125\26\35\30\0\10\35"+
    "\7\0\2\35\4\0\5\35\1\u0126\21\35\30\0\10\35"+
    "\7\0\2\35\4\0\15\35\1\u0127\11\35\30\0\10\35"+
    "\7\0\2\35\4\0\4\35\1\u0128\22\35\30\0\10\35"+
    "\7\0\2\35\4\0\1\u0129\26\35\30\0\10\35\7\0"+
    "\2\35\4\0\3\35\1\u012a\23\35\30\0\10\35\7\0"+
    "\2\35\4\0\4\35\1\u012b\22\35\30\0\10\35\7\0"+
    "\2\35\4\0\21\35\1\u012c\5\35\30\0\10\35\7\0"+
    "\2\35\4\0\21\35\1\u012d\5\35\21\0\1\u012e\112\0"+
    "\10\35\7\0\2\35\4\0\21\35\1\u012f\5\35\30\0"+
    "\10\35\7\0\2\35\4\0\21\35\1\u0130\5\35\30\0"+
    "\10\35\7\0\2\35\4\0\12\35\1\u0131\14\35\30\0"+
    "\10\35\7\0\2\35\4\0\14\35\1\u0132\12\35\30\0"+
    "\10\35\7\0\2\35\4\0\2\35\1\u0133\24\35\30\0"+
    "\10\35\7\0\2\35\4\0\4\35\1\u0134\22\35\30\0"+
    "\10\35\7\0\2\35\4\0\26\35\1\u0135\30\0\10\35"+
    "\7\0\2\35\4\0\4\35\1\u0136\22\35\52\0\1\u0137"+
    "\61\0\10\35\7\0\2\35\4\0\4\35\1\u0138\22\35"+
    "\30\0\10\35\7\0\2\35\4\0\3\35\1\u0139\23\35"+
    "\52\0\1\u013a\103\0\1\u013b\36\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14484];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\3\1\3\11\2\1\1\11"+
    "\6\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\24\1\1\11\1\1\5\11\2\0\1\11\1\0\1\1"+
    "\3\11\1\1\6\11\3\1\1\11\1\0\1\11\1\1"+
    "\3\11\1\1\1\0\2\11\52\1\5\11\1\1\2\11"+
    "\1\1\1\0\55\1\2\11\1\0\51\1\1\0\43\1"+
    "\1\0\26\1\1\0\14\1\1\0\10\1\1\0\2\1"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _AngelScriptLexer() {
    this((java.io.Reader)null);
  }


int peek() {
    int nextChar = yycharat(yylength());
    if (nextChar == -1) {
        return -1;
    } else {
        return (char) nextChar;
    }
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AngelScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case RAWVAL_STATE: {
              yybegin(YYINITIAL); return RAWVAL;
            }  // fall though
            case 316: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 128: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 129: break;
          case 3:
            { return EXCL;
            }
          // fall through
          case 130: break;
          case 4:
            { return HASH;
            }
          // fall through
          case 131: break;
          case 5:
            { return PERCENT;
            }
          // fall through
          case 132: break;
          case 6:
            { return AMP;
            }
          // fall through
          case 133: break;
          case 7:
            { yybegin(RAWVAL_STATE);
            }
          // fall through
          case 134: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 135: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 136: break;
          case 10:
            { return MUL;
            }
          // fall through
          case 137: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 138: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 139: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 140: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 141: break;
          case 15:
            { return DIV;
            }
          // fall through
          case 142: break;
          case 16:
            { return INTVAL;
            }
          // fall through
          case 143: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 144: break;
          case 18:
            { return SEMI;
            }
          // fall through
          case 145: break;
          case 19:
            { return LT;
            }
          // fall through
          case 146: break;
          case 20:
            { return EQ;
            }
          // fall through
          case 147: break;
          case 21:
            { return GT;
            }
          // fall through
          case 148: break;
          case 22:
            { return QUEST;
            }
          // fall through
          case 149: break;
          case 23:
            { return AT;
            }
          // fall through
          case 150: break;
          case 24:
            { return ID;
            }
          // fall through
          case 151: break;
          case 25:
            { return LBRACK;
            }
          // fall through
          case 152: break;
          case 26:
            { return RBRACK;
            }
          // fall through
          case 153: break;
          case 27:
            { return CAR;
            }
          // fall through
          case 154: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 155: break;
          case 29:
            { return VBAR;
            }
          // fall through
          case 156: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 157: break;
          case 31:
            { return TILDE;
            }
          // fall through
          case 158: break;
          case 32:
            { /*ignore*/
            }
          // fall through
          case 159: break;
          case 33:
            { yybegin(YYINITIAL); return RAWVAL;
            }
          // fall through
          case 160: break;
          case 34:
            { return NEQ;
            }
          // fall through
          case 161: break;
          case 35:
            { return STRING_DOUBLE;
            }
          // fall through
          case 162: break;
          case 36:
            { return HEXVAL;
            }
          // fall through
          case 163: break;
          case 37:
            { return PERCENT_EQ;
            }
          // fall through
          case 164: break;
          case 38:
            { return AMP_AMP;
            }
          // fall through
          case 165: break;
          case 39:
            { return AMP_EQ;
            }
          // fall through
          case 166: break;
          case 40:
            { return MUL_MUL;
            }
          // fall through
          case 167: break;
          case 41:
            { return MUL_EQ;
            }
          // fall through
          case 168: break;
          case 42:
            { return PLUS_PLUS;
            }
          // fall through
          case 169: break;
          case 43:
            { return PLUS_EQ;
            }
          // fall through
          case 170: break;
          case 44:
            { return MINUS_MINUS;
            }
          // fall through
          case 171: break;
          case 45:
            { return MINUS_EQ;
            }
          // fall through
          case 172: break;
          case 46:
            { return MINUS_GT;
            }
          // fall through
          case 173: break;
          case 47:
            { return REALVAL;
            }
          // fall through
          case 174: break;
          case 48:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 175: break;
          case 49:
            { return SINGLE_LINE_COMMENT;
            }
          // fall through
          case 176: break;
          case 50:
            { return DIV_EQ;
            }
          // fall through
          case 177: break;
          case 51:
            { return COLON_COLON;
            }
          // fall through
          case 178: break;
          case 52:
            { return LT_LT;
            }
          // fall through
          case 179: break;
          case 53:
            { return LT_EQ;
            }
          // fall through
          case 180: break;
          case 54:
            { return EQ_EQ;
            }
          // fall through
          case 181: break;
          case 55:
            { return GT_EQ;
            }
          // fall through
          case 182: break;
          case 56:
            { return GT_GT;
            }
          // fall through
          case 183: break;
          case 57:
            { return CAR_EQ;
            }
          // fall through
          case 184: break;
          case 58:
            { return CAR_CAR;
            }
          // fall through
          case 185: break;
          case 59:
            { return DO;
            }
          // fall through
          case 186: break;
          case 60:
            { return IF;
            }
          // fall through
          case 187: break;
          case 61:
            { return IN;
            }
          // fall through
          case 188: break;
          case 62:
            { return IS;
            }
          // fall through
          case 189: break;
          case 63:
            { return OR;
            }
          // fall through
          case 190: break;
          case 64:
            { return VBAR_EQ;
            }
          // fall through
          case 191: break;
          case 65:
            { return VBAR_VBAR;
            }
          // fall through
          case 192: break;
          case 66:
            { if (peek() == ' ') return NIS;
            }
          // fall through
          case 193: break;
          case 67:
            { return MUL_MUL_EQ;
            }
          // fall through
          case 194: break;
          case 68:
            { return LT_LT_EQ;
            }
          // fall through
          case 195: break;
          case 69:
            { return GT_GT_EQ;
            }
          // fall through
          case 196: break;
          case 70:
            { return GT_GT_GT;
            }
          // fall through
          case 197: break;
          case 71:
            { return AND;
            }
          // fall through
          case 198: break;
          case 72:
            { return FOR;
            }
          // fall through
          case 199: break;
          case 73:
            { return GET;
            }
          // fall through
          case 200: break;
          case 74:
            { return INT;
            }
          // fall through
          case 201: break;
          case 75:
            { return NIL;
            }
          // fall through
          case 202: break;
          case 76:
            { return NOT;
            }
          // fall through
          case 203: break;
          case 77:
            { return OUT;
            }
          // fall through
          case 204: break;
          case 78:
            { return SET;
            }
          // fall through
          case 205: break;
          case 79:
            { return XOR;
            }
          // fall through
          case 206: break;
          case 80:
            { return GT_GT_GT_EQ;
            }
          // fall through
          case 207: break;
          case 81:
            { return AUTO;
            }
          // fall through
          case 208: break;
          case 82:
            { return BOOL;
            }
          // fall through
          case 209: break;
          case 83:
            { return CASE;
            }
          // fall through
          case 210: break;
          case 84:
            { return CODE;
            }
          // fall through
          case 211: break;
          case 85:
            { return ELSE;
            }
          // fall through
          case 212: break;
          case 86:
            { return ENUM;
            }
          // fall through
          case 213: break;
          case 87:
            { return INT8;
            }
          // fall through
          case 214: break;
          case 88:
            { return NULL;
            }
          // fall through
          case 215: break;
          case 89:
            { return TRUE;
            }
          // fall through
          case 216: break;
          case 90:
            { return UINT;
            }
          // fall through
          case 217: break;
          case 91:
            { return VOID;
            }
          // fall through
          case 218: break;
          case 92:
            { return ARRAY;
            }
          // fall through
          case 219: break;
          case 93:
            { return BREAK;
            }
          // fall through
          case 220: break;
          case 94:
            { return CLASS;
            }
          // fall through
          case 221: break;
          case 95:
            { return CONST;
            }
          // fall through
          case 222: break;
          case 96:
            { return FALSE;
            }
          // fall through
          case 223: break;
          case 97:
            { return FINAL;
            }
          // fall through
          case 224: break;
          case 98:
            { return FLOAT;
            }
          // fall through
          case 225: break;
          case 99:
            { return INOUT;
            }
          // fall through
          case 226: break;
          case 100:
            { return INT16;
            }
          // fall through
          case 227: break;
          case 101:
            { return INT32;
            }
          // fall through
          case 228: break;
          case 102:
            { return INT64;
            }
          // fall through
          case 229: break;
          case 103:
            { return UINT8;
            }
          // fall through
          case 230: break;
          case 104:
            { return WHILE;
            }
          // fall through
          case 231: break;
          case 105:
            { return DOUBLE;
            }
          // fall through
          case 232: break;
          case 106:
            { return HANDLE;
            }
          // fall through
          case 233: break;
          case 107:
            { return RETURN;
            }
          // fall through
          case 234: break;
          case 108:
            { return SHARED;
            }
          // fall through
          case 235: break;
          case 109:
            { return STATIC;
            }
          // fall through
          case 236: break;
          case 110:
            { return STRING;
            }
          // fall through
          case 237: break;
          case 111:
            { return SWITCH;
            }
          // fall through
          case 238: break;
          case 112:
            { return UINT16;
            }
          // fall through
          case 239: break;
          case 113:
            { return UINT32;
            }
          // fall through
          case 240: break;
          case 114:
            { return UINT64;
            }
          // fall through
          case 241: break;
          case 115:
            { return DEFAULT;
            }
          // fall through
          case 242: break;
          case 116:
            { return FUNCDEF;
            }
          // fall through
          case 243: break;
          case 117:
            { return INCLUDE;
            }
          // fall through
          case 244: break;
          case 118:
            { return PRIVATE;
            }
          // fall through
          case 245: break;
          case 119:
            { return ABSTRACT;
            }
          // fall through
          case 246: break;
          case 120:
            { return EXPLICIT;
            }
          // fall through
          case 247: break;
          case 121:
            { return EXTERNAL;
            }
          // fall through
          case 248: break;
          case 122:
            { return FUNCTION;
            }
          // fall through
          case 249: break;
          case 123:
            { return OVERRIDE;
            }
          // fall through
          case 250: break;
          case 124:
            { return PROPERTY;
            }
          // fall through
          case 251: break;
          case 125:
            { return NAMESPACE;
            }
          // fall through
          case 252: break;
          case 126:
            { return PROTECTED;
            }
          // fall through
          case 253: break;
          case 127:
            { return STRING_BLOCK;
            }
          // fall through
          case 254: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
