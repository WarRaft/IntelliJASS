// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _AngelScriptLexer.flex

package guru.xgm.angelscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.sdk.language.psi.AngelScriptElementTypes.*;


public class _AngelScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\27\1\31\1\27\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\41\1\42\2\41\10\43\1\44\10\43\1\44\2\43"+
    "\1\45\1\46\1\47\1\50\1\43\1\0\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\43\1\57\1\60\1\43"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\43\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\43"+
    "\1\77\1\100\1\101\1\102\6\0\1\3\32\0\1\1"+
    "\u01df\0\1\1\177\0\13\1\35\0\2\3\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\377\0\u0100\103";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\22\27\1\33\1\34"+
    "\1\35\1\36\1\37\1\0\1\40\1\0\2\4\1\41"+
    "\1\42\1\43\1\44\1\0\1\45\1\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\0\1\54\1\0\1\54"+
    "\1\55\1\56\1\57\1\17\2\0\1\17\1\60\1\61"+
    "\1\62\1\0\1\63\1\64\1\65\1\0\1\66\1\67"+
    "\11\27\1\70\11\27\1\71\1\27\1\72\1\73\3\27"+
    "\1\74\15\27\1\75\1\76\1\40\1\0\1\4\1\77"+
    "\1\100\1\101\1\54\1\55\1\102\1\17\1\103\1\104"+
    "\1\0\1\27\1\105\20\27\1\106\4\27\1\107\3\27"+
    "\1\110\10\27\1\111\4\27\1\112\1\0\1\4\1\55"+
    "\1\113\1\27\1\114\1\115\1\27\1\116\1\117\6\27"+
    "\1\120\1\121\5\27\1\122\6\27\1\123\3\27\1\124"+
    "\10\27\1\125\1\27\1\126\1\127\1\27\1\0\1\130"+
    "\1\27\1\131\1\132\1\133\1\134\5\27\1\135\1\136"+
    "\1\137\3\27\1\140\1\141\1\142\1\143\1\27\1\144"+
    "\15\27\1\145\1\146\1\147\2\130\3\27\1\150\4\27"+
    "\1\151\6\27\1\152\1\153\1\154\1\155\1\27\1\156"+
    "\1\157\1\160\2\130\2\27\1\161\2\27\1\162\4\27"+
    "\1\163\2\27\1\164\2\130\1\165\1\166\1\167\1\170"+
    "\1\171\2\27\1\172\1\173\1\27\2\130\1\174\1\175"+
    "\1\176\5\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\104\0\104\0\u0264\0\u02a8\0\104\0\u02ec\0\u0330"+
    "\0\u0374\0\u03b8\0\u03fc\0\u0440\0\104\0\u0484\0\u04c8\0\u050c"+
    "\0\104\0\104\0\u0550\0\104\0\104\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\104\0\u0aa0\0\104\0\104\0\104\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\104\0\104\0\104\0\u0c38\0\u0220\0\104"+
    "\0\u0c7c\0\u0cc0\0\104\0\104\0\104\0\104\0\104\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\104\0\u0dd0\0\u0e14\0\104\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\104\0\104\0\104\0\104\0\u0f24\0\104\0\104"+
    "\0\104\0\u0f68\0\104\0\104\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u0550"+
    "\0\u14b8\0\u14fc\0\u0550\0\u1540\0\u1584\0\u15c8\0\u0550\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u1870\0\u18b4\0\u18f8\0\u193c\0\104\0\104\0\104\0\u1980"+
    "\0\u19c4\0\104\0\104\0\104\0\u0d8c\0\u1a08\0\u0e9c\0\u0ee0"+
    "\0\104\0\104\0\u1a4c\0\u1a90\0\u0550\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u0550\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u0550\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u0550"+
    "\0\u2354\0\u2398\0\u23dc\0\u2420\0\u0550\0\u2464\0\u24a8\0\104"+
    "\0\104\0\u24ec\0\u0550\0\u0550\0\u2530\0\u0550\0\u0550\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u0550\0\u0550\0\u270c"+
    "\0\u2750\0\u2794\0\u27d8\0\u281c\0\u0550\0\u2860\0\u28a4\0\u28e8"+
    "\0\u292c\0\u2970\0\u29b4\0\u0550\0\u29f8\0\u2a3c\0\u2a80\0\u0550"+
    "\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\u0550\0\u2ce4\0\u2d28\0\u0550\0\u2d6c\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u0550\0\u0550\0\u0550\0\u0550\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48"+
    "\0\u2f8c\0\u0550\0\u0550\0\u0550\0\u2fd0\0\u3014\0\u3058\0\u0550"+
    "\0\u0550\0\u0550\0\u0550\0\u309c\0\u0550\0\u30e0\0\u3124\0\u3168"+
    "\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388"+
    "\0\u33cc\0\u3410\0\u0550\0\u0550\0\u2db0\0\u3454\0\u3498\0\u34dc"+
    "\0\u3520\0\u3564\0\u0550\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u0550"+
    "\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u0550\0\u0550"+
    "\0\u0550\0\u0550\0\u3850\0\u0550\0\u0550\0\u0550\0\u3894\0\u38d8"+
    "\0\u391c\0\u3960\0\u0550\0\u39a4\0\u39e8\0\u0550\0\u3a2c\0\u3a70"+
    "\0\u3ab4\0\u3af8\0\u0550\0\u3b3c\0\u3b80\0\u0550\0\u3bc4\0\u3c08"+
    "\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u3c4c\0\u3c90\0\u0550"+
    "\0\u0550\0\u3cd4\0\u3d18\0\u3d5c\0\u0550\0\u0550\0\u0550\0\u3da0"+
    "\0\u3de4\0\u3e28\0\u0bb0\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\7\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\4\33\1\34\1\2\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\33\1\45\2\33\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\33\1\61\1\62\1\63\1\64\1\2"+
    "\105\0\3\3\135\0\1\65\46\0\5\66\1\67\40\66"+
    "\1\70\35\66\2\71\2\0\51\71\1\72\25\71\36\0"+
    "\1\73\56\0\1\74\24\0\1\75\12\0\1\76\33\0"+
    "\11\77\1\100\34\77\1\101\35\77\14\0\1\102\20\0"+
    "\1\103\63\0\1\104\17\0\1\105\65\0\1\106\15\0"+
    "\1\107\66\0\1\110\1\0\10\111\23\0\1\112\1\113"+
    "\41\0\1\114\4\0\1\115\13\0\1\116\66\0\1\117"+
    "\1\0\10\23\10\0\1\120\1\0\1\120\5\0\1\120"+
    "\1\0\1\120\1\121\1\122\6\0\1\120\7\0\1\120"+
    "\26\0\1\117\1\0\10\23\23\0\1\121\1\122\57\0"+
    "\1\123\2\0\1\124\65\0\1\125\14\0\1\126\1\127"+
    "\103\0\1\130\103\0\1\131\1\132\67\0\10\33\7\0"+
    "\4\33\4\0\26\33\42\0\1\133\12\0\1\134\55\0"+
    "\10\33\7\0\4\33\4\0\1\33\1\135\11\33\1\136"+
    "\5\33\1\137\4\33\27\0\10\33\7\0\4\33\4\0"+
    "\14\33\1\140\1\33\1\141\7\33\27\0\10\33\7\0"+
    "\4\33\4\0\1\142\10\33\1\143\2\33\1\144\11\33"+
    "\27\0\10\33\7\0\4\33\4\0\4\33\1\145\7\33"+
    "\1\146\11\33\27\0\10\33\7\0\4\33\4\0\11\33"+
    "\1\147\1\33\1\150\10\33\1\151\1\33\27\0\10\33"+
    "\7\0\4\33\4\0\1\152\6\33\1\153\1\33\1\154"+
    "\2\33\1\155\1\33\1\156\2\33\1\157\4\33\27\0"+
    "\10\33\7\0\4\33\4\0\5\33\1\160\4\33\1\161"+
    "\1\162\3\33\1\163\6\33\27\0\10\33\7\0\4\33"+
    "\4\0\7\33\1\164\16\33\27\0\10\33\7\0\4\33"+
    "\4\0\1\165\20\33\1\166\4\33\27\0\10\33\7\0"+
    "\4\33\4\0\16\33\1\167\2\33\1\170\1\171\3\33"+
    "\27\0\10\33\7\0\4\33\4\0\16\33\1\172\7\33"+
    "\27\0\10\33\7\0\4\33\4\0\4\33\1\173\21\33"+
    "\27\0\10\33\7\0\4\33\4\0\6\33\1\174\11\33"+
    "\1\175\2\33\1\176\2\33\27\0\10\33\7\0\4\33"+
    "\4\0\16\33\1\177\6\33\1\200\27\0\10\33\7\0"+
    "\4\33\4\0\7\33\1\201\16\33\27\0\10\33\7\0"+
    "\4\33\4\0\14\33\1\202\11\33\27\0\10\33\7\0"+
    "\4\33\4\0\6\33\1\203\17\33\27\0\10\33\7\0"+
    "\4\33\4\0\14\33\1\204\11\33\42\0\1\205\42\0"+
    "\1\206\3\0\5\66\1\207\40\66\1\70\35\66\5\0"+
    "\1\210\76\0\2\66\2\0\77\66\1\0\2\71\2\0"+
    "\77\71\1\0\2\71\2\0\56\71\1\211\20\71\36\0"+
    "\1\212\46\0\2\77\2\0\77\77\36\0\1\213\66\0"+
    "\1\214\105\0\10\111\23\0\1\112\1\113\47\0\10\215"+
    "\52\0\14\114\1\216\67\114\2\115\2\0\77\115\23\0"+
    "\10\117\23\0\1\121\1\122\47\0\10\217\7\0\2\217"+
    "\6\0\5\217\50\0\10\220\107\0\1\221\103\0\1\222"+
    "\1\223\67\0\10\33\7\0\4\33\4\0\17\33\1\224"+
    "\6\33\27\0\10\33\7\0\4\33\4\0\3\33\1\225"+
    "\22\33\27\0\10\33\7\0\4\33\4\0\20\33\1\226"+
    "\5\33\27\0\10\33\7\0\4\33\4\0\14\33\1\227"+
    "\11\33\27\0\10\33\7\0\4\33\4\0\4\33\1\230"+
    "\21\33\27\0\10\33\7\0\4\33\4\0\17\33\1\231"+
    "\1\232\5\33\27\0\10\33\7\0\4\33\4\0\1\233"+
    "\25\33\27\0\10\33\7\0\4\33\4\0\13\33\1\234"+
    "\12\33\27\0\10\33\7\0\4\33\4\0\5\33\1\235"+
    "\20\33\27\0\10\33\7\0\4\33\4\0\21\33\1\236"+
    "\4\33\27\0\10\33\7\0\4\33\4\0\17\33\1\237"+
    "\6\33\27\0\10\33\7\0\4\33\4\0\21\33\1\240"+
    "\4\33\27\0\10\33\7\0\4\33\4\0\15\33\1\241"+
    "\2\33\1\242\5\33\27\0\10\33\7\0\4\33\4\0"+
    "\11\33\1\243\14\33\27\0\10\33\7\0\4\33\4\0"+
    "\13\33\1\244\12\33\27\0\10\33\7\0\4\33\4\0"+
    "\14\33\1\245\11\33\27\0\10\33\7\0\4\33\4\0"+
    "\16\33\1\246\7\33\27\0\10\33\7\0\4\33\4\0"+
    "\14\33\1\247\11\33\27\0\10\33\7\0\4\33\4\0"+
    "\13\33\1\250\12\33\27\0\10\33\7\0\4\33\4\0"+
    "\15\33\1\251\10\33\27\0\10\33\7\0\4\33\4\0"+
    "\14\33\1\252\3\33\1\253\5\33\27\0\10\33\7\0"+
    "\4\33\4\0\24\33\1\254\1\33\27\0\10\33\7\0"+
    "\4\33\4\0\12\33\1\255\13\33\27\0\10\33\7\0"+
    "\4\33\4\0\11\33\1\256\14\33\27\0\10\33\7\0"+
    "\4\33\4\0\20\33\1\257\5\33\27\0\10\33\7\0"+
    "\4\33\4\0\4\33\1\260\21\33\27\0\10\33\7\0"+
    "\4\33\4\0\7\33\1\261\4\33\1\262\11\33\27\0"+
    "\10\33\7\0\4\33\4\0\20\33\1\263\5\33\27\0"+
    "\10\33\7\0\4\33\4\0\1\264\25\33\27\0\10\33"+
    "\7\0\4\33\4\0\16\33\1\265\7\33\27\0\10\33"+
    "\7\0\4\33\4\0\7\33\1\266\16\33\27\0\10\33"+
    "\7\0\4\33\4\0\21\33\1\267\3\33\1\270\27\0"+
    "\10\33\7\0\4\33\4\0\15\33\1\271\10\33\27\0"+
    "\10\33\7\0\4\33\4\0\13\33\1\272\12\33\27\0"+
    "\10\33\7\0\4\33\4\0\7\33\1\273\16\33\27\0"+
    "\10\33\7\0\4\33\4\0\7\33\1\274\16\33\27\0"+
    "\10\33\7\0\4\33\4\0\16\33\1\275\7\33\5\0"+
    "\3\210\1\0\1\210\1\276\75\210\1\0\2\71\2\0"+
    "\54\71\1\277\22\71\1\0\14\114\1\216\4\114\1\300"+
    "\62\114\35\0\1\301\70\0\10\33\7\0\4\33\4\0"+
    "\20\33\1\302\5\33\27\0\10\33\7\0\4\33\4\0"+
    "\14\33\1\303\11\33\27\0\10\33\7\0\4\33\4\0"+
    "\11\33\1\304\14\33\27\0\10\33\7\0\4\33\4\0"+
    "\1\305\25\33\27\0\10\33\7\0\4\33\4\0\4\33"+
    "\1\306\13\33\1\307\5\33\27\0\10\33\7\0\4\33"+
    "\4\0\2\33\1\310\23\33\27\0\10\33\7\0\4\33"+
    "\4\0\17\33\1\311\6\33\27\0\10\33\7\0\4\33"+
    "\4\0\17\33\1\312\1\313\5\33\27\0\10\33\7\0"+
    "\4\33\4\0\1\314\25\33\27\0\10\33\7\0\4\33"+
    "\4\0\1\33\1\315\24\33\27\0\10\33\7\0\4\33"+
    "\4\0\4\33\1\316\21\33\27\0\10\33\7\0\4\33"+
    "\4\0\12\33\1\317\13\33\27\0\10\33\7\0\4\33"+
    "\4\0\11\33\1\320\14\33\27\0\10\33\7\0\4\33"+
    "\4\0\4\33\1\321\21\33\27\0\10\33\7\0\4\33"+
    "\4\0\17\33\1\322\6\33\27\0\10\33\7\0\4\33"+
    "\4\0\1\323\25\33\27\0\10\33\7\0\4\33\4\0"+
    "\1\324\25\33\27\0\10\33\7\0\4\33\4\0\12\33"+
    "\1\325\13\33\27\0\10\33\7\0\4\33\4\0\2\33"+
    "\1\326\23\33\27\0\10\33\7\0\4\33\4\0\14\33"+
    "\1\327\11\33\27\0\10\33\7\0\4\33\4\0\21\33"+
    "\1\330\4\33\27\0\1\33\1\331\1\33\1\332\2\33"+
    "\1\333\1\334\7\0\4\33\4\0\4\33\1\335\21\33"+
    "\27\0\10\33\7\0\4\33\4\0\7\33\1\336\16\33"+
    "\27\0\10\33\7\0\4\33\4\0\4\33\1\337\21\33"+
    "\27\0\10\33\7\0\4\33\4\0\11\33\1\340\14\33"+
    "\27\0\10\33\7\0\4\33\4\0\16\33\1\341\7\33"+
    "\27\0\10\33\7\0\4\33\4\0\22\33\1\342\3\33"+
    "\27\0\10\33\7\0\4\33\4\0\15\33\1\343\2\33"+
    "\1\344\5\33\27\0\10\33\7\0\4\33\4\0\21\33"+
    "\1\345\4\33\27\0\10\33\7\0\4\33\4\0\16\33"+
    "\1\346\7\33\27\0\10\33\7\0\4\33\4\0\21\33"+
    "\1\347\4\33\27\0\10\33\7\0\4\33\4\0\20\33"+
    "\1\350\5\33\27\0\10\33\7\0\4\33\4\0\4\33"+
    "\1\351\21\33\27\0\10\33\7\0\4\33\4\0\4\33"+
    "\1\352\21\33\27\0\10\33\7\0\4\33\4\0\20\33"+
    "\1\353\5\33\27\0\10\33\7\0\4\33\4\0\3\33"+
    "\1\354\22\33\27\0\10\33\7\0\4\33\4\0\11\33"+
    "\1\355\14\33\5\0\3\210\1\0\1\210\1\356\75\210"+
    "\1\0\2\71\2\0\52\71\1\357\24\71\23\0\10\33"+
    "\7\0\4\33\4\0\16\33\1\360\7\33\27\0\10\33"+
    "\7\0\4\33\4\0\10\33\1\361\15\33\27\0\10\33"+
    "\7\0\4\33\4\0\6\33\1\362\17\33\27\0\10\33"+
    "\7\0\4\33\4\0\17\33\1\363\6\33\27\0\10\33"+
    "\7\0\4\33\4\0\20\33\1\364\5\33\27\0\10\33"+
    "\7\0\4\33\4\0\7\33\1\365\16\33\27\0\10\33"+
    "\7\0\4\33\4\0\21\33\1\366\4\33\27\0\10\33"+
    "\7\0\4\33\4\0\11\33\1\367\14\33\27\0\10\33"+
    "\7\0\4\33\4\0\7\33\1\370\16\33\27\0\10\33"+
    "\7\0\4\33\4\0\16\33\1\371\7\33\27\0\10\33"+
    "\7\0\4\33\4\0\4\33\1\372\21\33\27\0\10\33"+
    "\7\0\4\33\4\0\11\33\1\373\14\33\27\0\10\33"+
    "\7\0\4\33\4\0\20\33\1\374\5\33\27\0\10\33"+
    "\7\0\4\33\4\0\3\33\1\375\14\33\1\376\5\33"+
    "\27\0\10\33\7\0\4\33\4\0\16\33\1\377\7\33"+
    "\27\0\10\33\7\0\4\33\4\0\20\33\1\u0100\5\33"+
    "\27\0\6\33\1\u0101\1\33\7\0\4\33\4\0\26\33"+
    "\27\0\2\33\1\u0102\5\33\7\0\4\33\4\0\26\33"+
    "\27\0\4\33\1\u0103\3\33\7\0\4\33\4\0\26\33"+
    "\27\0\10\33\7\0\4\33\4\0\16\33\1\u0104\7\33"+
    "\27\0\10\33\7\0\4\33\4\0\13\33\1\u0105\12\33"+
    "\27\0\10\33\7\0\4\33\4\0\17\33\1\u0106\6\33"+
    "\27\0\10\33\7\0\4\33\4\0\16\33\1\u0107\7\33"+
    "\27\0\10\33\7\0\4\33\4\0\1\u0108\25\33\27\0"+
    "\10\33\7\0\4\33\4\0\4\33\1\u0109\21\33\27\0"+
    "\10\33\7\0\4\33\4\0\4\33\1\u010a\21\33\27\0"+
    "\10\33\7\0\4\33\4\0\16\33\1\u010b\7\33\27\0"+
    "\10\33\7\0\4\33\4\0\4\33\1\u010c\21\33\27\0"+
    "\10\33\7\0\4\33\4\0\2\33\1\u010d\23\33\27\0"+
    "\10\33\7\0\4\33\4\0\2\33\1\u010e\23\33\27\0"+
    "\10\33\7\0\4\33\4\0\3\33\1\u010f\22\33\27\0"+
    "\1\33\1\u0110\1\33\1\u0111\2\33\1\u0112\1\u0113\7\0"+
    "\4\33\4\0\26\33\27\0\10\33\7\0\4\33\4\0"+
    "\4\33\1\u0114\21\33\5\0\3\210\1\0\1\210\1\u0115"+
    "\75\210\1\0\2\357\2\u0116\2\357\1\u0117\74\357\1\u0116"+
    "\22\0\10\33\7\0\4\33\4\0\1\u0118\25\33\27\0"+
    "\10\33\7\0\4\33\4\0\13\33\1\u0119\12\33\27\0"+
    "\10\33\7\0\4\33\4\0\11\33\1\u011a\14\33\27\0"+
    "\10\33\7\0\4\33\4\0\4\33\1\u011b\21\33\27\0"+
    "\10\33\7\0\4\33\4\0\2\33\1\u011c\23\33\27\0"+
    "\10\33\7\0\4\33\4\0\13\33\1\u011d\12\33\27\0"+
    "\10\33\7\0\4\33\4\0\4\33\1\u011e\21\33\27\0"+
    "\10\33\7\0\4\33\4\0\7\33\1\u011f\16\33\27\0"+
    "\10\33\7\0\4\33\4\0\20\33\1\u0120\5\33\27\0"+
    "\10\33\7\0\4\33\4\0\5\33\1\u0121\20\33\27\0"+
    "\10\33\7\0\4\33\4\0\15\33\1\u0122\10\33\27\0"+
    "\10\33\7\0\4\33\4\0\7\33\1\u0123\16\33\27\0"+
    "\10\33\7\0\4\33\4\0\20\33\1\u0124\5\33\27\0"+
    "\10\33\7\0\4\33\4\0\16\33\1\u0125\7\33\27\0"+
    "\10\33\7\0\4\33\4\0\2\33\1\u0126\23\33\27\0"+
    "\10\33\7\0\4\33\4\0\13\33\1\u0127\12\33\27\0"+
    "\10\33\7\0\4\33\4\0\3\33\1\u0128\22\33\27\0"+
    "\10\33\7\0\4\33\4\0\20\33\1\u0129\5\33\27\0"+
    "\10\33\7\0\4\33\4\0\6\33\1\u012a\17\33\27\0"+
    "\10\33\7\0\4\33\4\0\4\33\1\u012b\21\33\27\0"+
    "\6\33\1\u012c\1\33\7\0\4\33\4\0\26\33\27\0"+
    "\2\33\1\u012d\5\33\7\0\4\33\4\0\26\33\27\0"+
    "\4\33\1\u012e\3\33\7\0\4\33\4\0\26\33\5\0"+
    "\6\u0116\1\u012f\75\u0116\2\357\2\u0116\2\357\1\u0117\46\357"+
    "\1\u0130\25\357\1\u0116\22\0\10\33\7\0\4\33\4\0"+
    "\2\33\1\u0131\23\33\27\0\10\33\7\0\4\33\4\0"+
    "\21\33\1\u0132\4\33\27\0\10\33\7\0\4\33\4\0"+
    "\20\33\1\u0133\5\33\27\0\10\33\7\0\4\33\4\0"+
    "\7\33\1\u0134\16\33\27\0\10\33\7\0\4\33\4\0"+
    "\1\u0135\25\33\27\0\10\33\7\0\4\33\4\0\5\33"+
    "\1\u0136\20\33\27\0\10\33\7\0\4\33\4\0\14\33"+
    "\1\u0137\11\33\27\0\10\33\7\0\4\33\4\0\1\u0138"+
    "\25\33\27\0\10\33\7\0\4\33\4\0\1\u0139\25\33"+
    "\27\0\10\33\7\0\4\33\4\0\3\33\1\u013a\22\33"+
    "\27\0\10\33\7\0\4\33\4\0\4\33\1\u013b\21\33"+
    "\27\0\10\33\7\0\4\33\4\0\20\33\1\u013c\5\33"+
    "\27\0\10\33\7\0\4\33\4\0\20\33\1\u013d\5\33"+
    "\27\0\10\33\7\0\4\33\4\0\5\33\1\u013e\20\33"+
    "\5\0\6\u0116\1\u012f\46\u0116\1\u013f\26\u0116\2\357\2\u0116"+
    "\2\357\1\u0117\55\357\1\u0140\16\357\1\u0116\22\0\10\33"+
    "\7\0\4\33\4\0\20\33\1\u0141\5\33\27\0\10\33"+
    "\7\0\4\33\4\0\4\33\1\u0142\21\33\27\0\10\33"+
    "\7\0\4\33\4\0\20\33\1\u0143\5\33\27\0\10\33"+
    "\7\0\4\33\4\0\11\33\1\u0144\14\33\27\0\10\33"+
    "\7\0\4\33\4\0\13\33\1\u0145\12\33\27\0\10\33"+
    "\7\0\4\33\4\0\2\33\1\u0146\23\33\27\0\10\33"+
    "\7\0\4\33\4\0\2\33\1\u0147\23\33\27\0\10\33"+
    "\7\0\4\33\4\0\4\33\1\u0148\21\33\27\0\10\33"+
    "\7\0\4\33\4\0\25\33\1\u0149\27\0\10\33\7\0"+
    "\4\33\4\0\4\33\1\u014a\21\33\5\0\6\u0116\1\u012f"+
    "\55\u0116\1\u014b\17\u0116\2\357\2\u0116\2\357\1\u0117\45\357"+
    "\1\u014c\26\357\1\u0116\22\0\10\33\7\0\4\33\4\0"+
    "\4\33\1\u014d\21\33\27\0\10\33\7\0\4\33\4\0"+
    "\4\33\1\u014e\21\33\27\0\10\33\7\0\4\33\4\0"+
    "\3\33\1\u014f\22\33\5\0\6\u0116\1\u012f\45\u0116\1\u0150"+
    "\27\u0116\2\357\2\u0116\2\357\1\u0117\51\357\1\u0151\22\357"+
    "\7\u0116\1\u012f\51\u0116\1\u0152\23\u0116\2\357\2\u0116\2\357"+
    "\1\u0117\47\357\1\u0153\24\357\7\u0116\1\u012f\47\u0116\1\u0154"+
    "\25\u0116";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15980];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\2\1\1\11\6\1\1\11"+
    "\3\1\2\11\1\1\2\11\23\1\1\11\1\1\3\11"+
    "\1\0\1\1\1\0\2\1\3\11\1\1\1\0\1\11"+
    "\1\0\1\1\5\11\1\0\1\1\1\0\1\11\2\1"+
    "\1\11\1\1\2\0\4\11\1\0\3\11\1\0\2\11"+
    "\50\1\3\11\1\0\1\1\3\11\4\1\2\11\1\0"+
    "\52\1\1\0\1\1\2\11\54\1\1\0\145\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _AngelScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AngelScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 127: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 128: break;
          case 3:
            { return T_NOT;
            }
          // fall through
          case 129: break;
          case 4:
            { return T_PRE_COMMENT;
            }
          // fall through
          case 130: break;
          case 5:
            { return T_REMAINDER;
            }
          // fall through
          case 131: break;
          case 6:
            { return T_BIT_AND;
            }
          // fall through
          case 132: break;
          case 7:
            { return T_LPAREN;
            }
          // fall through
          case 133: break;
          case 8:
            { return T_RPAREN;
            }
          // fall through
          case 134: break;
          case 9:
            { return T_MUL;
            }
          // fall through
          case 135: break;
          case 10:
            { return T_PLUS;
            }
          // fall through
          case 136: break;
          case 11:
            { return T_COMMA;
            }
          // fall through
          case 137: break;
          case 12:
            { return T_MINUS;
            }
          // fall through
          case 138: break;
          case 13:
            { return T_DOT;
            }
          // fall through
          case 139: break;
          case 14:
            { return T_QUOTIENT;
            }
          // fall through
          case 140: break;
          case 15:
            { return T_NUMB;
            }
          // fall through
          case 141: break;
          case 16:
            { return T_COLON;
            }
          // fall through
          case 142: break;
          case 17:
            { return T_SEMICOLON;
            }
          // fall through
          case 143: break;
          case 18:
            { return T_LESS;
            }
          // fall through
          case 144: break;
          case 19:
            { return T_ASSIGN;
            }
          // fall through
          case 145: break;
          case 20:
            { return T_GREATER;
            }
          // fall through
          case 146: break;
          case 21:
            { return T_QUEST;
            }
          // fall through
          case 147: break;
          case 22:
            { return T_AT;
            }
          // fall through
          case 148: break;
          case 23:
            { return T_IDENT;
            }
          // fall through
          case 149: break;
          case 24:
            { return T_LBRACK;
            }
          // fall through
          case 150: break;
          case 25:
            { return T_RBRACK;
            }
          // fall through
          case 151: break;
          case 26:
            { return T_BIT_XOR;
            }
          // fall through
          case 152: break;
          case 27:
            { return T_LBRACE;
            }
          // fall through
          case 153: break;
          case 28:
            { return T_BIT_OR;
            }
          // fall through
          case 154: break;
          case 29:
            { return T_RBRACE;
            }
          // fall through
          case 155: break;
          case 30:
            { return T_TILDE;
            }
          // fall through
          case 156: break;
          case 31:
            { return T_NOT_EQ;
            }
          // fall through
          case 157: break;
          case 32:
            { return T_STRING_DOUBLE;
            }
          // fall through
          case 158: break;
          case 33:
            { return T_REMAINDER_ASSIGN;
            }
          // fall through
          case 159: break;
          case 34:
            { return T_COND_AND;
            }
          // fall through
          case 160: break;
          case 35:
            { return T_BIT_AND_ASSIGN;
            }
          // fall through
          case 161: break;
          case 36:
            { return T_BIT_CLEAR;
            }
          // fall through
          case 162: break;
          case 37:
            { return T_STRING_SINGLE;
            }
          // fall through
          case 163: break;
          case 38:
            { return T_EXPONENT;
            }
          // fall through
          case 164: break;
          case 39:
            { return T_MUL_ASSIGN;
            }
          // fall through
          case 165: break;
          case 40:
            { return T_PLUS_PLUS;
            }
          // fall through
          case 166: break;
          case 41:
            { return T_PLUS_ASSIGN;
            }
          // fall through
          case 167: break;
          case 42:
            { return T_MINUS_MINUS;
            }
          // fall through
          case 168: break;
          case 43:
            { return T_MINUS_ASSIGN;
            }
          // fall through
          case 169: break;
          case 44:
            { return T_NUMB_2;
            }
          // fall through
          case 170: break;
          case 45:
            { return T_BLOCK_COMMENT;
            }
          // fall through
          case 171: break;
          case 46:
            { return T_LINE_COMMENT;
            }
          // fall through
          case 172: break;
          case 47:
            { return T_QUOTIENT_ASSIGN;
            }
          // fall through
          case 173: break;
          case 48:
            { return T_COLONCOLON;
            }
          // fall through
          case 174: break;
          case 49:
            { return T_VAR_ASSIGN;
            }
          // fall through
          case 175: break;
          case 50:
            { return T_SEND_CHANNEL;
            }
          // fall through
          case 176: break;
          case 51:
            { return T_LESS_OR_EQUAL;
            }
          // fall through
          case 177: break;
          case 52:
            { return T_EQ;
            }
          // fall through
          case 178: break;
          case 53:
            { return T_GREATER_OR_EQUAL;
            }
          // fall through
          case 179: break;
          case 54:
            { return T_BIT_XOR_ASSIGN;
            }
          // fall through
          case 180: break;
          case 55:
            { return T_LOGIC_XOR;
            }
          // fall through
          case 181: break;
          case 56:
            { return T_DO;
            }
          // fall through
          case 182: break;
          case 57:
            { return T_IF;
            }
          // fall through
          case 183: break;
          case 58:
            { return T_IN;
            }
          // fall through
          case 184: break;
          case 59:
            { return T_IS;
            }
          // fall through
          case 185: break;
          case 60:
            { return T_OR_TEXT;
            }
          // fall through
          case 186: break;
          case 61:
            { return T_BIT_OR_ASSIGN;
            }
          // fall through
          case 187: break;
          case 62:
            { return T_COND_OR;
            }
          // fall through
          case 188: break;
          case 63:
            { return T_BIT_CLEAR_ASSIGN;
            }
          // fall through
          case 189: break;
          case 64:
            { return T_EXP_ASSIGN;
            }
          // fall through
          case 190: break;
          case 65:
            { return T_TRIPLE_DOT;
            }
          // fall through
          case 191: break;
          case 66:
            { return T_BITS;
            }
          // fall through
          case 192: break;
          case 67:
            { return T_SHIFT_LEFT_ASSIGN;
            }
          // fall through
          case 193: break;
          case 68:
            { return T_SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 194: break;
          case 69:
            { return T_AND_TEXT;
            }
          // fall through
          case 195: break;
          case 70:
            { return T_FOR;
            }
          // fall through
          case 196: break;
          case 71:
            { return T_INT;
            }
          // fall through
          case 197: break;
          case 72:
            { return T_OUT;
            }
          // fall through
          case 198: break;
          case 73:
            { return T_TRY;
            }
          // fall through
          case 199: break;
          case 74:
            { return T_XOR_TEST;
            }
          // fall through
          case 200: break;
          case 75:
            { return T_SHIFT_SHIFT_RIGHT_ASSIN;
            }
          // fall through
          case 201: break;
          case 76:
            { return T_AUTO;
            }
          // fall through
          case 202: break;
          case 77:
            { return T_BOOL;
            }
          // fall through
          case 203: break;
          case 78:
            { return T_CASE;
            }
          // fall through
          case 204: break;
          case 79:
            { return T_CAST;
            }
          // fall through
          case 205: break;
          case 80:
            { return T_ELSE;
            }
          // fall through
          case 206: break;
          case 81:
            { return T_ENUM;
            }
          // fall through
          case 207: break;
          case 82:
            { return T_FROM;
            }
          // fall through
          case 208: break;
          case 83:
            { return T_INT8;
            }
          // fall through
          case 209: break;
          case 84:
            { return T_NULL;
            }
          // fall through
          case 210: break;
          case 85:
            { return T_TRUE;
            }
          // fall through
          case 211: break;
          case 86:
            { return T_UINT;
            }
          // fall through
          case 212: break;
          case 87:
            { return T_VOID;
            }
          // fall through
          case 213: break;
          case 88:
            { return T_ELIF_COMMENT;
            }
          // fall through
          case 214: break;
          case 89:
            { return T_BREAK;
            }
          // fall through
          case 215: break;
          case 90:
            { return T_CATCH;
            }
          // fall through
          case 216: break;
          case 91:
            { return T_CLASS;
            }
          // fall through
          case 217: break;
          case 92:
            { return T_CONST;
            }
          // fall through
          case 218: break;
          case 93:
            { return T_FALSE;
            }
          // fall through
          case 219: break;
          case 94:
            { return T_FINAL;
            }
          // fall through
          case 220: break;
          case 95:
            { return T_FLOAT;
            }
          // fall through
          case 221: break;
          case 96:
            { return T_INOUT;
            }
          // fall through
          case 222: break;
          case 97:
            { return T_INT16;
            }
          // fall through
          case 223: break;
          case 98:
            { return T_INT32;
            }
          // fall through
          case 224: break;
          case 99:
            { return T_INT64;
            }
          // fall through
          case 225: break;
          case 100:
            { return T_MIXIN;
            }
          // fall through
          case 226: break;
          case 101:
            { return T_UINT8;
            }
          // fall through
          case 227: break;
          case 102:
            { return T_WHILE;
            }
          // fall through
          case 228: break;
          case 103:
            { return T_STRING_BLOCK;
            }
          // fall through
          case 229: break;
          case 104:
            { return T_DOUBLE;
            }
          // fall through
          case 230: break;
          case 105:
            { return T_IMPORT;
            }
          // fall through
          case 231: break;
          case 106:
            { return T_RETURN;
            }
          // fall through
          case 232: break;
          case 107:
            { return T_SHARED;
            }
          // fall through
          case 233: break;
          case 108:
            { return T_STRUCT;
            }
          // fall through
          case 234: break;
          case 109:
            { return T_SWITCH;
            }
          // fall through
          case 235: break;
          case 110:
            { return T_UINT16;
            }
          // fall through
          case 236: break;
          case 111:
            { return T_UINT32;
            }
          // fall through
          case 237: break;
          case 112:
            { return T_UINT64;
            }
          // fall through
          case 238: break;
          case 113:
            { return T_DEFAULT;
            }
          // fall through
          case 239: break;
          case 114:
            { return T_FUNCDEF;
            }
          // fall through
          case 240: break;
          case 115:
            { return T_PRIVATE;
            }
          // fall through
          case 241: break;
          case 116:
            { return T_TYPEDEF;
            }
          // fall through
          case 242: break;
          case 117:
            { return T_ABSTRACT;
            }
          // fall through
          case 243: break;
          case 118:
            { return T_CONTINUE;
            }
          // fall through
          case 244: break;
          case 119:
            { return T_EXPLICIT;
            }
          // fall through
          case 245: break;
          case 120:
            { return T_EXTERNAL;
            }
          // fall through
          case 246: break;
          case 121:
            { return T_FUNCTION;
            }
          // fall through
          case 247: break;
          case 122:
            { return T_OVERRIDE;
            }
          // fall through
          case 248: break;
          case 123:
            { return T_PROPERTY;
            }
          // fall through
          case 249: break;
          case 124:
            { return T_INTERFACE;
            }
          // fall through
          case 250: break;
          case 125:
            { return T_NAMESPACE;
            }
          // fall through
          case 251: break;
          case 126:
            { return T_PROTECTED;
            }
          // fall through
          case 252: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
