// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: VjassLexer.flex

package guru.xgm.vjass.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static guru.xgm.vjass.psi.VjassTypes.*;


public class _VjassLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\0\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\11\22\2\0"+
    "\1\23\1\24\1\25\2\0\4\26\1\27\1\26\4\30"+
    "\1\31\15\30\1\32\1\30\1\33\1\34\1\35\1\0"+
    "\1\30\1\0\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\30\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\30\12\0\1\66\u01a2\0\2\66"+
    "\326\0\u0100\66";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\21\17\1\22\1\0\1\23\1\0"+
    "\1\24\1\0\1\25\1\26\1\0\1\27\1\0\1\30"+
    "\1\31\1\32\17\17\1\33\12\17\1\34\11\17\2\0"+
    "\2\27\1\35\1\36\27\17\1\37\7\17\1\40\6\17"+
    "\1\0\1\27\2\17\1\41\1\42\2\17\1\43\14\17"+
    "\1\44\4\17\1\45\4\17\1\46\3\17\1\47\6\17"+
    "\1\50\1\51\1\52\1\53\2\17\1\54\3\17\1\55"+
    "\7\17\1\56\6\17\1\57\14\17\1\60\2\17\1\61"+
    "\13\17\1\62\3\17\1\63\1\64\1\65\3\17\1\66"+
    "\1\17\1\67\1\70\1\71\1\72\1\73\4\17\1\74"+
    "\4\17\1\75\1\17\1\76\1\17\1\77\1\100\1\101"+
    "\1\17\1\102\1\17\1\103\1\104\6\17\1\105\1\106"+
    "\1\17\1\107\1\110\3\17\1\111\1\112\1\113\1\114"+
    "\1\17\1\115\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\u0181\0\u01b8\0\u01ef"+
    "\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\67\0\67"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\67\0\334\0\67\0\u0717\0\u0113\0\u014a\0\67"+
    "\0\u0181\0\u074e\0\u0785\0\u0113\0\67\0\67\0\67\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0302\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0302\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\67\0\u0f78\0\u0302"+
    "\0\u0302\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1"+
    "\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u0302\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u0f0a\0\u17d9\0\u1810\0\u0302\0\u0302\0\u1847\0\u187e\0\u18b5"+
    "\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u0302\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u0302\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u0302\0\u1d38"+
    "\0\u1d6f\0\u1da6\0\u0302\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u1ef0\0\u0302\0\u0302\0\u0302\0\u0302\0\u1f27\0\u1f5e\0\u0302"+
    "\0\u1f95\0\u1fcc\0\u2003\0\u0302\0\u203a\0\u2071\0\u20a8\0\u20df"+
    "\0\u2116\0\u214d\0\u2184\0\u0302\0\u21bb\0\u21f2\0\u2229\0\u2260"+
    "\0\u2297\0\u22ce\0\u0302\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1"+
    "\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u0302"+
    "\0\u2599\0\u25d0\0\u0302\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3"+
    "\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u0302\0\u2864"+
    "\0\u289b\0\u28d2\0\u0302\0\u0302\0\u0302\0\u2909\0\u2940\0\u2977"+
    "\0\u0302\0\u29ae\0\u29e5\0\u0302\0\u0302\0\u0302\0\u0302\0\u2a1c"+
    "\0\u2a53\0\u2a8a\0\u2ac1\0\u0302\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d"+
    "\0\u0302\0\u2bd4\0\u0302\0\u2c0b\0\u0302\0\u0302\0\u0302\0\u2c42"+
    "\0\u0302\0\u2c79\0\u0302\0\u0302\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55"+
    "\0\u2d8c\0\u2dc3\0\u0302\0\u0302\0\u2dfa\0\u0302\0\u0302\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u0302\0\u0302\0\u0302\0\u0302\0\u2ed6\0\u0302"+
    "\0\u0302\0\u0302";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\3\25\1\26\1\25\1\27\1\2"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\25\1\42\1\43\1\44\1\45\1\46"+
    "\1\25\1\47\1\50\1\51\5\25\1\2\70\0\4\3"+
    "\106\0\1\52\42\0\6\53\1\54\25\53\1\55\32\53"+
    "\21\0\2\56\3\0\2\56\6\0\6\56\23\0\10\57"+
    "\1\60\56\57\21\0\2\61\57\0\1\62\4\0\1\63"+
    "\65\0\1\61\1\0\2\21\41\0\1\64\21\0\1\61"+
    "\1\0\2\21\70\0\1\65\66\0\1\66\66\0\1\67"+
    "\63\0\2\25\3\0\5\25\3\0\30\25\22\0\2\25"+
    "\3\0\1\25\1\70\3\25\3\0\30\25\22\0\2\25"+
    "\3\0\5\25\3\0\14\25\1\71\3\25\1\72\7\25"+
    "\22\0\2\25\3\0\5\25\3\0\15\25\1\73\12\25"+
    "\22\0\2\25\3\0\5\25\3\0\1\74\14\25\1\75"+
    "\12\25\22\0\2\25\3\0\5\25\3\0\4\25\1\76"+
    "\23\25\22\0\2\25\3\0\5\25\3\0\12\25\1\77"+
    "\1\25\1\100\11\25\1\101\1\25\22\0\2\25\3\0"+
    "\5\25\3\0\1\102\22\25\1\103\4\25\22\0\2\25"+
    "\3\0\5\25\3\0\12\25\1\104\15\25\22\0\2\25"+
    "\3\0\5\25\3\0\1\105\14\25\1\106\12\25\22\0"+
    "\2\25\3\0\5\25\3\0\5\25\1\107\5\25\1\110"+
    "\1\111\13\25\22\0\2\25\3\0\5\25\3\0\10\25"+
    "\1\112\4\25\1\113\12\25\22\0\2\25\3\0\5\25"+
    "\3\0\4\25\1\114\10\25\1\115\12\25\22\0\2\25"+
    "\3\0\5\25\3\0\1\116\14\25\1\117\5\25\1\120"+
    "\4\25\22\0\2\25\3\0\5\25\3\0\16\25\1\121"+
    "\1\25\1\122\7\25\22\0\2\25\3\0\5\25\3\0"+
    "\20\25\1\123\2\25\1\124\4\25\22\0\2\25\3\0"+
    "\5\25\3\0\4\25\1\125\23\25\22\0\2\25\3\0"+
    "\5\25\3\0\4\25\1\126\15\25\1\127\5\25\22\0"+
    "\2\25\3\0\5\25\3\0\1\130\6\25\1\131\10\25"+
    "\1\132\6\25\1\133\1\0\2\53\3\0\61\53\1\0"+
    "\13\134\1\135\53\134\2\63\1\136\1\63\1\137\62\63"+
    "\21\0\2\25\3\0\4\25\1\140\3\0\30\25\22\0"+
    "\2\25\3\0\5\25\3\0\3\25\1\141\24\25\22\0"+
    "\2\25\3\0\5\25\3\0\20\25\1\142\7\25\22\0"+
    "\2\25\3\0\5\25\3\0\15\25\1\143\12\25\22\0"+
    "\2\25\3\0\5\25\3\0\12\25\1\144\15\25\22\0"+
    "\2\25\3\0\5\25\3\0\3\25\1\145\10\25\1\146"+
    "\13\25\22\0\2\25\3\0\5\25\3\0\1\25\1\147"+
    "\26\25\22\0\2\25\3\0\5\25\3\0\21\25\1\150"+
    "\6\25\22\0\2\25\3\0\5\25\3\0\3\25\1\151"+
    "\24\25\22\0\2\25\3\0\5\25\3\0\10\25\1\152"+
    "\11\25\1\153\5\25\22\0\2\25\3\0\5\25\3\0"+
    "\12\25\1\154\15\25\22\0\2\25\3\0\5\25\3\0"+
    "\14\25\1\155\13\25\22\0\2\25\3\0\5\25\3\0"+
    "\15\25\1\156\12\25\22\0\2\25\3\0\5\25\3\0"+
    "\14\25\1\157\13\25\22\0\2\25\3\0\5\25\3\0"+
    "\15\25\1\160\12\25\22\0\2\25\3\0\5\25\3\0"+
    "\16\25\1\161\11\25\22\0\2\25\3\0\5\25\3\0"+
    "\22\25\1\162\5\25\22\0\2\25\3\0\5\25\3\0"+
    "\1\25\1\163\26\25\22\0\2\25\3\0\5\25\3\0"+
    "\2\25\1\164\12\25\1\165\12\25\22\0\2\25\3\0"+
    "\5\25\3\0\22\25\1\166\5\25\22\0\2\25\3\0"+
    "\5\25\3\0\3\25\1\167\24\25\22\0\2\25\3\0"+
    "\5\25\3\0\22\25\1\170\5\25\22\0\2\25\3\0"+
    "\5\25\3\0\22\25\1\171\5\25\22\0\2\25\3\0"+
    "\5\25\3\0\12\25\1\172\15\25\22\0\2\25\3\0"+
    "\5\25\3\0\22\25\1\173\5\25\22\0\2\25\3\0"+
    "\5\25\3\0\10\25\1\174\17\25\22\0\2\25\3\0"+
    "\5\25\3\0\1\25\1\175\26\25\22\0\2\25\3\0"+
    "\5\25\3\0\1\176\16\25\1\177\2\25\1\200\5\25"+
    "\22\0\2\25\3\0\5\25\3\0\22\25\1\201\5\25"+
    "\22\0\2\25\3\0\5\25\3\0\1\202\17\25\1\203"+
    "\7\25\22\0\2\25\3\0\5\25\3\0\11\25\1\204"+
    "\16\25\22\0\2\25\3\0\5\25\3\0\4\25\1\205"+
    "\23\25\22\0\2\25\3\0\5\25\3\0\23\25\1\206"+
    "\4\25\22\0\2\25\3\0\5\25\3\0\16\25\1\207"+
    "\11\25\1\0\13\134\1\210\66\134\1\210\4\134\1\211"+
    "\46\134\2\0\1\136\105\0\2\25\3\0\5\25\3\0"+
    "\1\212\27\25\22\0\2\25\3\0\5\25\3\0\12\25"+
    "\1\213\15\25\22\0\2\25\3\0\5\25\3\0\12\25"+
    "\1\214\15\25\22\0\2\25\3\0\5\25\3\0\4\25"+
    "\1\215\23\25\22\0\2\25\3\0\5\25\3\0\21\25"+
    "\1\216\6\25\22\0\2\25\3\0\5\25\3\0\23\25"+
    "\1\217\4\25\22\0\2\25\3\0\5\25\3\0\4\25"+
    "\1\220\23\25\22\0\2\25\3\0\5\25\3\0\5\25"+
    "\1\221\1\222\1\25\1\223\1\25\1\224\1\225\5\25"+
    "\1\226\6\25\22\0\2\25\3\0\5\25\3\0\22\25"+
    "\1\227\5\25\22\0\2\25\3\0\5\25\3\0\4\25"+
    "\1\230\23\25\22\0\2\25\3\0\5\25\3\0\21\25"+
    "\1\231\6\25\22\0\2\25\3\0\5\25\3\0\2\25"+
    "\1\232\25\25\22\0\2\25\3\0\5\25\3\0\1\25"+
    "\1\233\26\25\22\0\2\25\3\0\5\25\3\0\3\25"+
    "\1\234\24\25\22\0\2\25\3\0\5\25\3\0\11\25"+
    "\1\235\16\25\22\0\2\25\3\0\5\25\3\0\12\25"+
    "\1\236\15\25\22\0\2\25\3\0\5\25\3\0\4\25"+
    "\1\237\23\25\22\0\2\25\3\0\5\25\3\0\20\25"+
    "\1\240\7\25\22\0\2\25\3\0\5\25\3\0\1\241"+
    "\27\25\22\0\2\25\3\0\5\25\3\0\16\25\1\242"+
    "\11\25\22\0\2\25\3\0\5\25\3\0\7\25\1\243"+
    "\20\25\22\0\2\25\3\0\5\25\3\0\23\25\1\244"+
    "\4\25\22\0\2\25\3\0\5\25\3\0\10\25\1\245"+
    "\17\25\22\0\2\25\3\0\5\25\3\0\7\25\1\246"+
    "\20\25\22\0\2\25\3\0\5\25\3\0\12\25\1\247"+
    "\15\25\22\0\2\25\3\0\5\25\3\0\10\25\1\250"+
    "\17\25\22\0\2\25\3\0\5\25\3\0\24\25\1\251"+
    "\3\25\22\0\2\25\3\0\5\25\3\0\12\25\1\252"+
    "\15\25\22\0\2\25\3\0\5\25\3\0\12\25\1\253"+
    "\15\25\22\0\2\25\3\0\5\25\3\0\23\25\1\254"+
    "\4\25\22\0\2\25\3\0\5\25\3\0\23\25\1\255"+
    "\4\25\22\0\2\25\3\0\5\25\3\0\22\25\1\256"+
    "\5\25\22\0\2\25\3\0\5\25\3\0\10\25\1\257"+
    "\12\25\1\260\4\25\22\0\2\25\3\0\5\25\3\0"+
    "\4\25\1\261\23\25\22\0\2\25\3\0\5\25\3\0"+
    "\14\25\1\262\13\25\22\0\2\25\3\0\5\25\3\0"+
    "\4\25\1\263\23\25\22\0\2\25\3\0\5\25\3\0"+
    "\4\25\1\264\23\25\1\0\13\134\1\210\4\134\1\136"+
    "\46\134\21\0\2\25\3\0\5\25\3\0\27\25\1\265"+
    "\22\0\2\25\3\0\5\25\3\0\4\25\1\266\23\25"+
    "\22\0\2\25\3\0\5\25\3\0\22\25\1\267\5\25"+
    "\22\0\2\25\3\0\5\25\3\0\6\25\1\270\21\25"+
    "\22\0\2\25\3\0\5\25\3\0\10\25\1\271\17\25"+
    "\22\0\2\25\3\0\5\25\3\0\23\25\1\272\4\25"+
    "\22\0\2\25\3\0\5\25\3\0\12\25\1\273\15\25"+
    "\22\0\2\25\3\0\5\25\3\0\5\25\1\274\22\25"+
    "\22\0\2\25\3\0\5\25\3\0\10\25\1\275\4\25"+
    "\1\276\12\25\22\0\2\25\3\0\5\25\3\0\4\25"+
    "\1\277\10\25\1\300\12\25\22\0\2\25\3\0\5\25"+
    "\3\0\22\25\1\301\5\25\22\0\2\25\3\0\5\25"+
    "\3\0\25\25\1\302\2\25\22\0\2\25\3\0\5\25"+
    "\3\0\14\25\1\303\13\25\22\0\2\25\3\0\5\25"+
    "\3\0\4\25\1\304\23\25\22\0\2\25\3\0\5\25"+
    "\3\0\22\25\1\305\5\25\22\0\2\25\3\0\5\25"+
    "\3\0\1\306\27\25\22\0\2\25\3\0\5\25\3\0"+
    "\12\25\1\307\15\25\22\0\2\25\3\0\5\25\3\0"+
    "\4\25\1\310\23\25\22\0\2\25\3\0\5\25\3\0"+
    "\6\25\1\311\21\25\22\0\2\25\3\0\5\25\3\0"+
    "\1\312\27\25\22\0\2\25\3\0\5\25\3\0\12\25"+
    "\1\313\15\25\22\0\2\25\3\0\5\25\3\0\15\25"+
    "\1\314\12\25\22\0\2\25\3\0\5\25\3\0\12\25"+
    "\1\315\15\25\22\0\2\25\3\0\5\25\3\0\24\25"+
    "\1\316\3\25\22\0\2\25\3\0\5\25\3\0\10\25"+
    "\1\317\17\25\22\0\2\25\3\0\5\25\3\0\15\25"+
    "\1\320\12\25\22\0\2\25\3\0\5\25\3\0\1\321"+
    "\27\25\22\0\2\25\3\0\5\25\3\0\10\25\1\322"+
    "\17\25\22\0\2\25\3\0\5\25\3\0\10\25\1\323"+
    "\17\25\22\0\2\25\3\0\5\25\3\0\20\25\1\324"+
    "\7\25\22\0\2\25\3\0\5\25\3\0\10\25\1\325"+
    "\17\25\22\0\2\25\3\0\5\25\3\0\14\25\1\326"+
    "\13\25\22\0\2\25\3\0\5\25\3\0\2\25\1\327"+
    "\25\25\22\0\2\25\3\0\5\25\3\0\21\25\1\330"+
    "\6\25\22\0\2\25\3\0\5\25\3\0\1\331\27\25"+
    "\22\0\2\25\3\0\5\25\3\0\1\332\27\25\22\0"+
    "\2\25\3\0\5\25\3\0\5\25\1\333\22\25\22\0"+
    "\2\25\3\0\5\25\3\0\14\25\1\334\13\25\22\0"+
    "\2\25\3\0\5\25\3\0\15\25\1\335\12\25\22\0"+
    "\2\25\3\0\5\25\3\0\1\25\1\336\26\25\22\0"+
    "\2\25\3\0\5\25\3\0\15\25\1\337\12\25\22\0"+
    "\2\25\3\0\5\25\3\0\22\25\1\340\5\25\22\0"+
    "\2\25\3\0\5\25\3\0\3\25\1\341\24\25\22\0"+
    "\2\25\3\0\5\25\3\0\20\25\1\342\7\25\22\0"+
    "\2\25\3\0\5\25\3\0\7\25\1\343\20\25\22\0"+
    "\2\25\3\0\5\25\3\0\3\25\1\344\24\25\22\0"+
    "\2\25\3\0\5\25\3\0\10\25\1\345\17\25\22\0"+
    "\2\25\3\0\5\25\3\0\12\25\1\346\15\25\22\0"+
    "\2\25\3\0\5\25\3\0\4\25\1\347\23\25\22\0"+
    "\2\25\3\0\5\25\3\0\13\25\1\350\14\25\22\0"+
    "\2\25\3\0\5\25\3\0\4\25\1\351\23\25\22\0"+
    "\2\25\3\0\5\25\3\0\20\25\1\352\7\25\22\0"+
    "\2\25\3\0\5\25\3\0\3\25\1\353\24\25\22\0"+
    "\2\25\3\0\5\25\3\0\4\25\1\354\23\25\22\0"+
    "\2\25\3\0\5\25\3\0\4\25\1\355\23\25\22\0"+
    "\2\25\3\0\5\25\3\0\14\25\1\356\13\25\22\0"+
    "\2\25\3\0\5\25\3\0\14\25\1\357\13\25\22\0"+
    "\2\25\3\0\5\25\3\0\22\25\1\360\5\25\22\0"+
    "\2\25\3\0\5\25\3\0\2\25\1\361\25\25\22\0"+
    "\2\25\3\0\5\25\3\0\20\25\1\362\7\25\22\0"+
    "\2\25\3\0\5\25\3\0\14\25\1\363\13\25\22\0"+
    "\2\25\3\0\5\25\3\0\2\25\1\364\25\25\22\0"+
    "\2\25\3\0\5\25\3\0\6\25\1\365\21\25\22\0"+
    "\2\25\3\0\5\25\3\0\22\25\1\366\5\25\22\0"+
    "\2\25\3\0\5\25\3\0\14\25\1\367\13\25\22\0"+
    "\2\25\3\0\5\25\3\0\14\25\1\370\13\25\22\0"+
    "\2\25\3\0\5\25\3\0\2\25\1\371\25\25\22\0"+
    "\2\25\3\0\5\25\3\0\1\25\1\372\26\25\22\0"+
    "\2\25\3\0\5\25\3\0\20\25\1\373\7\25\22\0"+
    "\2\25\3\0\5\25\3\0\16\25\1\374\11\25\22\0"+
    "\2\25\3\0\5\25\3\0\7\25\1\375\20\25\22\0"+
    "\2\25\3\0\5\25\3\0\23\25\1\376\4\25\22\0"+
    "\2\25\3\0\5\25\3\0\23\25\1\377\4\25\22\0"+
    "\2\25\3\0\5\25\3\0\4\25\1\u0100\23\25\22\0"+
    "\2\25\3\0\5\25\3\0\21\25\1\u0101\6\25\22\0"+
    "\2\25\3\0\5\25\3\0\15\25\1\u0102\12\25\22\0"+
    "\2\25\3\0\5\25\3\0\21\25\1\u0103\6\25\22\0"+
    "\2\25\3\0\5\25\3\0\4\25\1\u0104\23\25\22\0"+
    "\2\25\3\0\5\25\3\0\20\25\1\u0105\7\25\22\0"+
    "\2\25\3\0\5\25\3\0\27\25\1\u0106\22\0\2\25"+
    "\3\0\5\25\3\0\6\25\1\u0107\21\25\22\0\2\25"+
    "\3\0\5\25\3\0\1\u0108\27\25\22\0\2\25\3\0"+
    "\5\25\3\0\4\25\1\u0109\23\25\22\0\2\25\3\0"+
    "\5\25\3\0\4\25\1\u010a\23\25\22\0\2\25\3\0"+
    "\5\25\3\0\21\25\1\u010b\6\25\22\0\2\25\3\0"+
    "\5\25\3\0\22\25\1\u010c\5\25\22\0\2\25\3\0"+
    "\5\25\3\0\22\25\1\u010d\5\25\22\0\2\25\3\0"+
    "\5\25\3\0\1\u010e\27\25\22\0\2\25\3\0\5\25"+
    "\3\0\1\u010f\27\25\22\0\2\25\3\0\5\25\3\0"+
    "\15\25\1\u0110\12\25\22\0\2\25\3\0\5\25\3\0"+
    "\12\25\1\u0111\15\25\22\0\2\25\3\0\5\25\3\0"+
    "\2\25\1\u0112\25\25\22\0\2\25\3\0\5\25\3\0"+
    "\14\25\1\u0113\13\25\22\0\2\25\3\0\5\25\3\0"+
    "\14\25\1\u0114\13\25\22\0\2\25\3\0\5\25\3\0"+
    "\14\25\1\u0115\13\25\22\0\2\25\3\0\5\25\3\0"+
    "\12\25\1\u0116\15\25\22\0\2\25\3\0\5\25\3\0"+
    "\21\25\1\u0117\6\25\22\0\2\25\3\0\5\25\3\0"+
    "\10\25\1\u0118\17\25\22\0\2\25\3\0\5\25\3\0"+
    "\12\25\1\u0119\15\25\22\0\2\25\3\0\5\25\3\0"+
    "\20\25\1\u011a\7\25\22\0\2\25\3\0\5\25\3\0"+
    "\3\25\1\u011b\24\25\22\0\2\25\3\0\5\25\3\0"+
    "\4\25\1\u011c\23\25\22\0\2\25\3\0\5\25\3\0"+
    "\22\25\1\u011d\5\25\22\0\2\25\3\0\5\25\3\0"+
    "\22\25\1\u011e\5\25\22\0\2\25\3\0\5\25\3\0"+
    "\15\25\1\u011f\12\25\22\0\2\25\3\0\5\25\3\0"+
    "\21\25\1\u0120\6\25\22\0\2\25\3\0\5\25\3\0"+
    "\27\25\1\u0121\22\0\2\25\3\0\5\25\3\0\14\25"+
    "\1\u0122\13\25\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12045];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\6\11\11\1\2\11\21\1\1\11"+
    "\1\0\1\11\1\0\1\1\1\0\1\11\1\1\1\0"+
    "\1\1\1\0\3\11\44\1\2\0\1\11\51\1\1\0"+
    "\232\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _VjassLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VjassLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 80: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 81: break;
          case 3:
            { return LPAREN;
            }
          // fall through
          case 82: break;
          case 4:
            { return RPAREN;
            }
          // fall through
          case 83: break;
          case 5:
            { return MUL;
            }
          // fall through
          case 84: break;
          case 6:
            { return PLUS;
            }
          // fall through
          case 85: break;
          case 7:
            { return COMMA;
            }
          // fall through
          case 86: break;
          case 8:
            { return MINUS;
            }
          // fall through
          case 87: break;
          case 9:
            { return DOT;
            }
          // fall through
          case 88: break;
          case 10:
            { return DIV;
            }
          // fall through
          case 89: break;
          case 11:
            { return INTVAL;
            }
          // fall through
          case 90: break;
          case 12:
            { return LT;
            }
          // fall through
          case 91: break;
          case 13:
            { return EQ;
            }
          // fall through
          case 92: break;
          case 14:
            { return GT;
            }
          // fall through
          case 93: break;
          case 15:
            { return ID;
            }
          // fall through
          case 94: break;
          case 16:
            { return LBRACK;
            }
          // fall through
          case 95: break;
          case 17:
            { return RBRACK;
            }
          // fall through
          case 96: break;
          case 18:
            { return NEQ;
            }
          // fall through
          case 97: break;
          case 19:
            { return STRVAL;
            }
          // fall through
          case 98: break;
          case 20:
            { return HEXVAL;
            }
          // fall through
          case 99: break;
          case 21:
            { return RAWVAL;
            }
          // fall through
          case 100: break;
          case 22:
            { return REALVAL;
            }
          // fall through
          case 101: break;
          case 23:
            { 
            }
          // fall through
          case 102: break;
          case 24:
            { return LT_EQ;
            }
          // fall through
          case 103: break;
          case 25:
            { return EQ_EQ;
            }
          // fall through
          case 104: break;
          case 26:
            { return GT_EQ;
            }
          // fall through
          case 105: break;
          case 27:
            { return IF;
            }
          // fall through
          case 106: break;
          case 28:
            { return OR;
            }
          // fall through
          case 107: break;
          case 29:
            { return KEY;
            }
          // fall through
          case 108: break;
          case 30:
            { return AND;
            }
          // fall through
          case 109: break;
          case 31:
            { return NOT;
            }
          // fall through
          case 110: break;
          case 32:
            { return SET;
            }
          // fall through
          case 111: break;
          case 33:
            { return CALL;
            }
          // fall through
          case 112: break;
          case 34:
            { return CODE;
            }
          // fall through
          case 113: break;
          case 35:
            { return ELSE;
            }
          // fall through
          case 114: break;
          case 36:
            { return HOOK;
            }
          // fall through
          case 115: break;
          case 37:
            { return LOOP;
            }
          // fall through
          case 116: break;
          case 38:
            { return NULL;
            }
          // fall through
          case 117: break;
          case 39:
            { return REAL;
            }
          // fall through
          case 118: break;
          case 40:
            { return THEN;
            }
          // fall through
          case 119: break;
          case 41:
            { return TRUE;
            }
          // fall through
          case 120: break;
          case 42:
            { return TYPE;
            }
          // fall through
          case 121: break;
          case 43:
            { return ARRAY;
            }
          // fall through
          case 122: break;
          case 44:
            { return DEBUG;
            }
          // fall through
          case 123: break;
          case 45:
            { return ENDIF;
            }
          // fall through
          case 124: break;
          case 46:
            { return FALSE;
            }
          // fall through
          case 125: break;
          case 47:
            { return LOCAL;
            }
          // fall through
          case 126: break;
          case 48:
            { return TAKES;
            }
          // fall through
          case 127: break;
          case 49:
            { return ELSEIF;
            }
          // fall through
          case 128: break;
          case 50:
            { return HANDLE;
            }
          // fall through
          case 129: break;
          case 51:
            { return METHOD;
            }
          // fall through
          case 130: break;
          case 52:
            { return MODULE;
            }
          // fall through
          case 131: break;
          case 53:
            { return NATIVE;
            }
          // fall through
          case 132: break;
          case 54:
            { return PUBLIC;
            }
          // fall through
          case 133: break;
          case 55:
            { return RETURN;
            }
          // fall through
          case 134: break;
          case 56:
            { return STATIC;
            }
          // fall through
          case 135: break;
          case 57:
            { return STRING;
            }
          // fall through
          case 136: break;
          case 58:
            { return STRUCT;
            }
          // fall through
          case 137: break;
          case 59:
            { return BOOLEAN;
            }
          // fall through
          case 138: break;
          case 60:
            { return ENDLOOP;
            }
          // fall through
          case 139: break;
          case 61:
            { return EXTENDS;
            }
          // fall through
          case 140: break;
          case 62:
            { return GLOBALS;
            }
          // fall through
          case 141: break;
          case 63:
            { return INTEGER;
            }
          // fall through
          case 142: break;
          case 64:
            { return LIBRARY;
            }
          // fall through
          case 143: break;
          case 65:
            { return NOTHING;
            }
          // fall through
          case 144: break;
          case 66:
            { return PRIVATE;
            }
          // fall through
          case 145: break;
          case 67:
            { return RETURNS;
            }
          // fall through
          case 146: break;
          case 68:
            { return CONSTANT;
            }
          // fall through
          case 147: break;
          case 69:
            { return EXITWHEN;
            }
          // fall through
          case 148: break;
          case 70:
            { return FUNCTION;
            }
          // fall through
          case 149: break;
          case 71:
            { return OPTIONAL;
            }
          // fall through
          case 150: break;
          case 72:
            { return REQUIRES;
            }
          // fall through
          case 151: break;
          case 73:
            { return ENDMETHOD;
            }
          // fall through
          case 152: break;
          case 74:
            { return ENDMODULE;
            }
          // fall through
          case 153: break;
          case 75:
            { return ENDSTRUCT;
            }
          // fall through
          case 154: break;
          case 76:
            { return IMPLEMENT;
            }
          // fall through
          case 155: break;
          case 77:
            { return ENDGLOBALS;
            }
          // fall through
          case 156: break;
          case 78:
            { return ENDLIBRARY;
            }
          // fall through
          case 157: break;
          case 79:
            { return ENDFUNCTION;
            }
          // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
