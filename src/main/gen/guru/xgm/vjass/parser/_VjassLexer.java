// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: VjassLexer.flex

package guru.xgm.vjass.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static guru.xgm.vjass.psi.VjassTypes.*;


public class _VjassLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\0"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\11\20\2\0\1\21\1\22"+
    "\1\23\2\0\4\24\1\25\1\24\4\26\1\27\15\26"+
    "\1\30\1\26\1\31\1\32\1\33\1\0\1\26\1\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\26\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\26\12\0\1\64\u01a2\0\2\64\326\0\u0100\64";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\4\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\21\17\3\22\1\23\1\0\1\24"+
    "\1\0\1\25\1\0\1\26\1\27\1\30\1\0\1\31"+
    "\1\32\1\33\17\17\1\34\12\17\1\35\11\17\1\36"+
    "\1\37\1\40\1\41\27\17\1\42\7\17\1\43\10\17"+
    "\1\44\1\45\2\17\1\46\14\17\1\47\4\17\1\50"+
    "\4\17\1\51\3\17\1\52\6\17\1\53\1\54\1\55"+
    "\1\56\2\17\1\57\3\17\1\60\7\17\1\61\6\17"+
    "\1\62\14\17\1\63\2\17\1\64\13\17\1\65\3\17"+
    "\1\66\1\67\1\70\3\17\1\71\1\17\1\72\1\73"+
    "\1\74\1\75\1\76\4\17\1\77\4\17\1\100\1\17"+
    "\1\101\1\17\1\102\1\103\1\104\1\17\1\105\1\17"+
    "\1\106\1\107\6\17\1\110\1\111\1\17\1\112\1\113"+
    "\3\17\1\114\1\115\1\116\1\117\1\17\1\120\1\121"+
    "\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\u01a8\0\u01dd"+
    "\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\152"+
    "\0\152\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\152\0\u070a\0\u073f\0\152\0\u0109\0\152"+
    "\0\u0774\0\u013e\0\u0173\0\152\0\u01a8\0\152\0\u013e\0\152"+
    "\0\152\0\152\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2"+
    "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u031b\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u031b\0\u0cd6\0\u0d0b\0\u0d40"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\152\0\152"+
    "\0\u031b\0\u031b\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4"+
    "\0\u14e9\0\u031b\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\u1691\0\u031b\0\u031b\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\u031b\0\u19e1\0\u1a16\0\u1a4b\0\u1a80"+
    "\0\u031b\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u031b\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u031b\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u031b\0\u031b\0\u031b\0\u031b\0\u1d66\0\u1d9b\0\u031b\0\u1dd0"+
    "\0\u1e05\0\u1e3a\0\u031b\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43"+
    "\0\u1f78\0\u1fad\0\u031b\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6"+
    "\0\u20eb\0\u031b\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229"+
    "\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u031b\0\u239c"+
    "\0\u23d1\0\u031b\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u031b\0\u264d\0\u2682"+
    "\0\u26b7\0\u031b\0\u031b\0\u031b\0\u26ec\0\u2721\0\u2756\0\u031b"+
    "\0\u278b\0\u27c0\0\u031b\0\u031b\0\u031b\0\u031b\0\u27f5\0\u282a"+
    "\0\u285f\0\u2894\0\u031b\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u031b"+
    "\0\u299d\0\u031b\0\u29d2\0\u031b\0\u031b\0\u031b\0\u2a07\0\u031b"+
    "\0\u2a3c\0\u031b\0\u031b\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45"+
    "\0\u2b7a\0\u031b\0\u031b\0\u2baf\0\u031b\0\u031b\0\u2be4\0\u2c19"+
    "\0\u2c4e\0\u031b\0\u031b\0\u031b\0\u031b\0\u2c83\0\u031b\0\u031b"+
    "\0\u031b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\3\26\1\27\1\26\1\30\1\3"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\26\1\43\1\44\1\45\1\46\1\47"+
    "\1\26\1\50\1\51\1\52\5\26\1\3\11\53\1\54"+
    "\4\53\1\55\46\53\66\0\2\4\104\0\1\56\42\0"+
    "\4\57\1\60\25\57\1\61\32\57\17\0\2\62\3\0"+
    "\2\62\6\0\6\62\23\0\6\63\1\64\56\63\17\0"+
    "\2\65\55\0\1\66\70\0\1\65\1\0\2\22\41\0"+
    "\1\67\17\0\1\65\1\0\2\22\66\0\1\70\64\0"+
    "\1\71\64\0\1\72\61\0\2\26\3\0\5\26\3\0"+
    "\30\26\20\0\2\26\3\0\1\26\1\73\3\26\3\0"+
    "\30\26\20\0\2\26\3\0\5\26\3\0\14\26\1\74"+
    "\3\26\1\75\7\26\20\0\2\26\3\0\5\26\3\0"+
    "\15\26\1\76\12\26\20\0\2\26\3\0\5\26\3\0"+
    "\1\77\14\26\1\100\12\26\20\0\2\26\3\0\5\26"+
    "\3\0\4\26\1\101\23\26\20\0\2\26\3\0\5\26"+
    "\3\0\12\26\1\102\1\26\1\103\11\26\1\104\1\26"+
    "\20\0\2\26\3\0\5\26\3\0\1\105\22\26\1\106"+
    "\4\26\20\0\2\26\3\0\5\26\3\0\12\26\1\107"+
    "\15\26\20\0\2\26\3\0\5\26\3\0\1\110\14\26"+
    "\1\111\12\26\20\0\2\26\3\0\5\26\3\0\5\26"+
    "\1\112\5\26\1\113\1\114\13\26\20\0\2\26\3\0"+
    "\5\26\3\0\10\26\1\115\4\26\1\116\12\26\20\0"+
    "\2\26\3\0\5\26\3\0\4\26\1\117\10\26\1\120"+
    "\12\26\20\0\2\26\3\0\5\26\3\0\1\121\14\26"+
    "\1\122\5\26\1\123\4\26\20\0\2\26\3\0\5\26"+
    "\3\0\16\26\1\124\1\26\1\125\7\26\20\0\2\26"+
    "\3\0\5\26\3\0\20\26\1\126\2\26\1\127\4\26"+
    "\20\0\2\26\3\0\5\26\3\0\4\26\1\130\23\26"+
    "\20\0\2\26\3\0\5\26\3\0\4\26\1\131\15\26"+
    "\1\132\5\26\20\0\2\26\3\0\5\26\3\0\1\133"+
    "\6\26\1\134\10\26\1\135\6\26\1\136\17\0\1\137"+
    "\57\0\1\140\53\0\2\57\1\0\61\57\20\0\2\26"+
    "\3\0\4\26\1\141\3\0\30\26\20\0\2\26\3\0"+
    "\5\26\3\0\3\26\1\142\24\26\20\0\2\26\3\0"+
    "\5\26\3\0\20\26\1\143\7\26\20\0\2\26\3\0"+
    "\5\26\3\0\15\26\1\144\12\26\20\0\2\26\3\0"+
    "\5\26\3\0\12\26\1\145\15\26\20\0\2\26\3\0"+
    "\5\26\3\0\3\26\1\146\10\26\1\147\13\26\20\0"+
    "\2\26\3\0\5\26\3\0\1\26\1\150\26\26\20\0"+
    "\2\26\3\0\5\26\3\0\21\26\1\151\6\26\20\0"+
    "\2\26\3\0\5\26\3\0\3\26\1\152\24\26\20\0"+
    "\2\26\3\0\5\26\3\0\10\26\1\153\11\26\1\154"+
    "\5\26\20\0\2\26\3\0\5\26\3\0\12\26\1\155"+
    "\15\26\20\0\2\26\3\0\5\26\3\0\14\26\1\156"+
    "\13\26\20\0\2\26\3\0\5\26\3\0\15\26\1\157"+
    "\12\26\20\0\2\26\3\0\5\26\3\0\14\26\1\160"+
    "\13\26\20\0\2\26\3\0\5\26\3\0\15\26\1\161"+
    "\12\26\20\0\2\26\3\0\5\26\3\0\16\26\1\162"+
    "\11\26\20\0\2\26\3\0\5\26\3\0\22\26\1\163"+
    "\5\26\20\0\2\26\3\0\5\26\3\0\1\26\1\164"+
    "\26\26\20\0\2\26\3\0\5\26\3\0\2\26\1\165"+
    "\12\26\1\166\12\26\20\0\2\26\3\0\5\26\3\0"+
    "\22\26\1\167\5\26\20\0\2\26\3\0\5\26\3\0"+
    "\3\26\1\170\24\26\20\0\2\26\3\0\5\26\3\0"+
    "\22\26\1\171\5\26\20\0\2\26\3\0\5\26\3\0"+
    "\22\26\1\172\5\26\20\0\2\26\3\0\5\26\3\0"+
    "\12\26\1\173\15\26\20\0\2\26\3\0\5\26\3\0"+
    "\22\26\1\174\5\26\20\0\2\26\3\0\5\26\3\0"+
    "\10\26\1\175\17\26\20\0\2\26\3\0\5\26\3\0"+
    "\1\26\1\176\26\26\20\0\2\26\3\0\5\26\3\0"+
    "\1\177\16\26\1\200\2\26\1\201\5\26\20\0\2\26"+
    "\3\0\5\26\3\0\22\26\1\202\5\26\20\0\2\26"+
    "\3\0\5\26\3\0\1\203\17\26\1\204\7\26\20\0"+
    "\2\26\3\0\5\26\3\0\11\26\1\205\16\26\20\0"+
    "\2\26\3\0\5\26\3\0\4\26\1\206\23\26\20\0"+
    "\2\26\3\0\5\26\3\0\23\26\1\207\4\26\20\0"+
    "\2\26\3\0\5\26\3\0\16\26\1\210\11\26\20\0"+
    "\2\26\3\0\5\26\3\0\1\211\27\26\20\0\2\26"+
    "\3\0\5\26\3\0\12\26\1\212\15\26\20\0\2\26"+
    "\3\0\5\26\3\0\12\26\1\213\15\26\20\0\2\26"+
    "\3\0\5\26\3\0\4\26\1\214\23\26\20\0\2\26"+
    "\3\0\5\26\3\0\21\26\1\215\6\26\20\0\2\26"+
    "\3\0\5\26\3\0\23\26\1\216\4\26\20\0\2\26"+
    "\3\0\5\26\3\0\4\26\1\217\23\26\20\0\2\26"+
    "\3\0\5\26\3\0\5\26\1\220\1\221\1\26\1\222"+
    "\1\26\1\223\1\224\5\26\1\225\6\26\20\0\2\26"+
    "\3\0\5\26\3\0\22\26\1\226\5\26\20\0\2\26"+
    "\3\0\5\26\3\0\4\26\1\227\23\26\20\0\2\26"+
    "\3\0\5\26\3\0\21\26\1\230\6\26\20\0\2\26"+
    "\3\0\5\26\3\0\2\26\1\231\25\26\20\0\2\26"+
    "\3\0\5\26\3\0\1\26\1\232\26\26\20\0\2\26"+
    "\3\0\5\26\3\0\3\26\1\233\24\26\20\0\2\26"+
    "\3\0\5\26\3\0\11\26\1\234\16\26\20\0\2\26"+
    "\3\0\5\26\3\0\12\26\1\235\15\26\20\0\2\26"+
    "\3\0\5\26\3\0\4\26\1\236\23\26\20\0\2\26"+
    "\3\0\5\26\3\0\20\26\1\237\7\26\20\0\2\26"+
    "\3\0\5\26\3\0\1\240\27\26\20\0\2\26\3\0"+
    "\5\26\3\0\16\26\1\241\11\26\20\0\2\26\3\0"+
    "\5\26\3\0\7\26\1\242\20\26\20\0\2\26\3\0"+
    "\5\26\3\0\23\26\1\243\4\26\20\0\2\26\3\0"+
    "\5\26\3\0\10\26\1\244\17\26\20\0\2\26\3\0"+
    "\5\26\3\0\7\26\1\245\20\26\20\0\2\26\3\0"+
    "\5\26\3\0\12\26\1\246\15\26\20\0\2\26\3\0"+
    "\5\26\3\0\10\26\1\247\17\26\20\0\2\26\3\0"+
    "\5\26\3\0\24\26\1\250\3\26\20\0\2\26\3\0"+
    "\5\26\3\0\12\26\1\251\15\26\20\0\2\26\3\0"+
    "\5\26\3\0\12\26\1\252\15\26\20\0\2\26\3\0"+
    "\5\26\3\0\23\26\1\253\4\26\20\0\2\26\3\0"+
    "\5\26\3\0\23\26\1\254\4\26\20\0\2\26\3\0"+
    "\5\26\3\0\22\26\1\255\5\26\20\0\2\26\3\0"+
    "\5\26\3\0\10\26\1\256\12\26\1\257\4\26\20\0"+
    "\2\26\3\0\5\26\3\0\4\26\1\260\23\26\20\0"+
    "\2\26\3\0\5\26\3\0\14\26\1\261\13\26\20\0"+
    "\2\26\3\0\5\26\3\0\4\26\1\262\23\26\20\0"+
    "\2\26\3\0\5\26\3\0\4\26\1\263\23\26\20\0"+
    "\2\26\3\0\5\26\3\0\27\26\1\264\20\0\2\26"+
    "\3\0\5\26\3\0\4\26\1\265\23\26\20\0\2\26"+
    "\3\0\5\26\3\0\22\26\1\266\5\26\20\0\2\26"+
    "\3\0\5\26\3\0\6\26\1\267\21\26\20\0\2\26"+
    "\3\0\5\26\3\0\10\26\1\270\17\26\20\0\2\26"+
    "\3\0\5\26\3\0\23\26\1\271\4\26\20\0\2\26"+
    "\3\0\5\26\3\0\12\26\1\272\15\26\20\0\2\26"+
    "\3\0\5\26\3\0\5\26\1\273\22\26\20\0\2\26"+
    "\3\0\5\26\3\0\10\26\1\274\4\26\1\275\12\26"+
    "\20\0\2\26\3\0\5\26\3\0\4\26\1\276\10\26"+
    "\1\277\12\26\20\0\2\26\3\0\5\26\3\0\22\26"+
    "\1\300\5\26\20\0\2\26\3\0\5\26\3\0\25\26"+
    "\1\301\2\26\20\0\2\26\3\0\5\26\3\0\14\26"+
    "\1\302\13\26\20\0\2\26\3\0\5\26\3\0\4\26"+
    "\1\303\23\26\20\0\2\26\3\0\5\26\3\0\22\26"+
    "\1\304\5\26\20\0\2\26\3\0\5\26\3\0\1\305"+
    "\27\26\20\0\2\26\3\0\5\26\3\0\12\26\1\306"+
    "\15\26\20\0\2\26\3\0\5\26\3\0\4\26\1\307"+
    "\23\26\20\0\2\26\3\0\5\26\3\0\6\26\1\310"+
    "\21\26\20\0\2\26\3\0\5\26\3\0\1\311\27\26"+
    "\20\0\2\26\3\0\5\26\3\0\12\26\1\312\15\26"+
    "\20\0\2\26\3\0\5\26\3\0\15\26\1\313\12\26"+
    "\20\0\2\26\3\0\5\26\3\0\12\26\1\314\15\26"+
    "\20\0\2\26\3\0\5\26\3\0\24\26\1\315\3\26"+
    "\20\0\2\26\3\0\5\26\3\0\10\26\1\316\17\26"+
    "\20\0\2\26\3\0\5\26\3\0\15\26\1\317\12\26"+
    "\20\0\2\26\3\0\5\26\3\0\1\320\27\26\20\0"+
    "\2\26\3\0\5\26\3\0\10\26\1\321\17\26\20\0"+
    "\2\26\3\0\5\26\3\0\10\26\1\322\17\26\20\0"+
    "\2\26\3\0\5\26\3\0\20\26\1\323\7\26\20\0"+
    "\2\26\3\0\5\26\3\0\10\26\1\324\17\26\20\0"+
    "\2\26\3\0\5\26\3\0\14\26\1\325\13\26\20\0"+
    "\2\26\3\0\5\26\3\0\2\26\1\326\25\26\20\0"+
    "\2\26\3\0\5\26\3\0\21\26\1\327\6\26\20\0"+
    "\2\26\3\0\5\26\3\0\1\330\27\26\20\0\2\26"+
    "\3\0\5\26\3\0\1\331\27\26\20\0\2\26\3\0"+
    "\5\26\3\0\5\26\1\332\22\26\20\0\2\26\3\0"+
    "\5\26\3\0\14\26\1\333\13\26\20\0\2\26\3\0"+
    "\5\26\3\0\15\26\1\334\12\26\20\0\2\26\3\0"+
    "\5\26\3\0\1\26\1\335\26\26\20\0\2\26\3\0"+
    "\5\26\3\0\15\26\1\336\12\26\20\0\2\26\3\0"+
    "\5\26\3\0\22\26\1\337\5\26\20\0\2\26\3\0"+
    "\5\26\3\0\3\26\1\340\24\26\20\0\2\26\3\0"+
    "\5\26\3\0\20\26\1\341\7\26\20\0\2\26\3\0"+
    "\5\26\3\0\7\26\1\342\20\26\20\0\2\26\3\0"+
    "\5\26\3\0\3\26\1\343\24\26\20\0\2\26\3\0"+
    "\5\26\3\0\10\26\1\344\17\26\20\0\2\26\3\0"+
    "\5\26\3\0\12\26\1\345\15\26\20\0\2\26\3\0"+
    "\5\26\3\0\4\26\1\346\23\26\20\0\2\26\3\0"+
    "\5\26\3\0\13\26\1\347\14\26\20\0\2\26\3\0"+
    "\5\26\3\0\4\26\1\350\23\26\20\0\2\26\3\0"+
    "\5\26\3\0\20\26\1\351\7\26\20\0\2\26\3\0"+
    "\5\26\3\0\3\26\1\352\24\26\20\0\2\26\3\0"+
    "\5\26\3\0\4\26\1\353\23\26\20\0\2\26\3\0"+
    "\5\26\3\0\4\26\1\354\23\26\20\0\2\26\3\0"+
    "\5\26\3\0\14\26\1\355\13\26\20\0\2\26\3\0"+
    "\5\26\3\0\14\26\1\356\13\26\20\0\2\26\3\0"+
    "\5\26\3\0\22\26\1\357\5\26\20\0\2\26\3\0"+
    "\5\26\3\0\2\26\1\360\25\26\20\0\2\26\3\0"+
    "\5\26\3\0\20\26\1\361\7\26\20\0\2\26\3\0"+
    "\5\26\3\0\14\26\1\362\13\26\20\0\2\26\3\0"+
    "\5\26\3\0\2\26\1\363\25\26\20\0\2\26\3\0"+
    "\5\26\3\0\6\26\1\364\21\26\20\0\2\26\3\0"+
    "\5\26\3\0\22\26\1\365\5\26\20\0\2\26\3\0"+
    "\5\26\3\0\14\26\1\366\13\26\20\0\2\26\3\0"+
    "\5\26\3\0\14\26\1\367\13\26\20\0\2\26\3\0"+
    "\5\26\3\0\2\26\1\370\25\26\20\0\2\26\3\0"+
    "\5\26\3\0\1\26\1\371\26\26\20\0\2\26\3\0"+
    "\5\26\3\0\20\26\1\372\7\26\20\0\2\26\3\0"+
    "\5\26\3\0\16\26\1\373\11\26\20\0\2\26\3\0"+
    "\5\26\3\0\7\26\1\374\20\26\20\0\2\26\3\0"+
    "\5\26\3\0\23\26\1\375\4\26\20\0\2\26\3\0"+
    "\5\26\3\0\23\26\1\376\4\26\20\0\2\26\3\0"+
    "\5\26\3\0\4\26\1\377\23\26\20\0\2\26\3\0"+
    "\5\26\3\0\21\26\1\u0100\6\26\20\0\2\26\3\0"+
    "\5\26\3\0\15\26\1\u0101\12\26\20\0\2\26\3\0"+
    "\5\26\3\0\21\26\1\u0102\6\26\20\0\2\26\3\0"+
    "\5\26\3\0\4\26\1\u0103\23\26\20\0\2\26\3\0"+
    "\5\26\3\0\20\26\1\u0104\7\26\20\0\2\26\3\0"+
    "\5\26\3\0\27\26\1\u0105\20\0\2\26\3\0\5\26"+
    "\3\0\6\26\1\u0106\21\26\20\0\2\26\3\0\5\26"+
    "\3\0\1\u0107\27\26\20\0\2\26\3\0\5\26\3\0"+
    "\4\26\1\u0108\23\26\20\0\2\26\3\0\5\26\3\0"+
    "\4\26\1\u0109\23\26\20\0\2\26\3\0\5\26\3\0"+
    "\21\26\1\u010a\6\26\20\0\2\26\3\0\5\26\3\0"+
    "\22\26\1\u010b\5\26\20\0\2\26\3\0\5\26\3\0"+
    "\22\26\1\u010c\5\26\20\0\2\26\3\0\5\26\3\0"+
    "\1\u010d\27\26\20\0\2\26\3\0\5\26\3\0\1\u010e"+
    "\27\26\20\0\2\26\3\0\5\26\3\0\15\26\1\u010f"+
    "\12\26\20\0\2\26\3\0\5\26\3\0\12\26\1\u0110"+
    "\15\26\20\0\2\26\3\0\5\26\3\0\2\26\1\u0111"+
    "\25\26\20\0\2\26\3\0\5\26\3\0\14\26\1\u0112"+
    "\13\26\20\0\2\26\3\0\5\26\3\0\14\26\1\u0113"+
    "\13\26\20\0\2\26\3\0\5\26\3\0\14\26\1\u0114"+
    "\13\26\20\0\2\26\3\0\5\26\3\0\12\26\1\u0115"+
    "\15\26\20\0\2\26\3\0\5\26\3\0\21\26\1\u0116"+
    "\6\26\20\0\2\26\3\0\5\26\3\0\10\26\1\u0117"+
    "\17\26\20\0\2\26\3\0\5\26\3\0\12\26\1\u0118"+
    "\15\26\20\0\2\26\3\0\5\26\3\0\20\26\1\u0119"+
    "\7\26\20\0\2\26\3\0\5\26\3\0\3\26\1\u011a"+
    "\24\26\20\0\2\26\3\0\5\26\3\0\4\26\1\u011b"+
    "\23\26\20\0\2\26\3\0\5\26\3\0\22\26\1\u011c"+
    "\5\26\20\0\2\26\3\0\5\26\3\0\22\26\1\u011d"+
    "\5\26\20\0\2\26\3\0\5\26\3\0\15\26\1\u011e"+
    "\12\26\20\0\2\26\3\0\5\26\3\0\21\26\1\u011f"+
    "\6\26\20\0\2\26\3\0\5\26\3\0\27\26\1\u0120"+
    "\20\0\2\26\3\0\5\26\3\0\14\26\1\u0121\13\26"+
    "\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11448];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\6\11\11\1\2\11\21\1\1\11"+
    "\2\1\1\11\1\0\1\11\1\0\1\1\1\0\1\11"+
    "\1\1\1\11\1\0\3\11\44\1\2\11\301\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _VjassLexer() {
    this((java.io.Reader)null);
  }
    int commentCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VjassLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 83: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 84: break;
          case 3:
            { return LPAREN;
            }
          // fall through
          case 85: break;
          case 4:
            { return RPAREN;
            }
          // fall through
          case 86: break;
          case 5:
            { return MUL;
            }
          // fall through
          case 87: break;
          case 6:
            { return PLUS;
            }
          // fall through
          case 88: break;
          case 7:
            { return COMMA;
            }
          // fall through
          case 89: break;
          case 8:
            { return MINUS;
            }
          // fall through
          case 90: break;
          case 9:
            { return DOT;
            }
          // fall through
          case 91: break;
          case 10:
            { return DIV;
            }
          // fall through
          case 92: break;
          case 11:
            { return INTVAL;
            }
          // fall through
          case 93: break;
          case 12:
            { return LT;
            }
          // fall through
          case 94: break;
          case 13:
            { return EQ;
            }
          // fall through
          case 95: break;
          case 14:
            { return GT;
            }
          // fall through
          case 96: break;
          case 15:
            { return ID;
            }
          // fall through
          case 97: break;
          case 16:
            { return LBRACK;
            }
          // fall through
          case 98: break;
          case 17:
            { return RBRACK;
            }
          // fall through
          case 99: break;
          case 18:
            { /*ignore*/
            }
          // fall through
          case 100: break;
          case 19:
            { return NEQ;
            }
          // fall through
          case 101: break;
          case 20:
            { return STRVAL;
            }
          // fall through
          case 102: break;
          case 21:
            { return HEXVAL;
            }
          // fall through
          case 103: break;
          case 22:
            { return RAWVAL;
            }
          // fall through
          case 104: break;
          case 23:
            { return REALVAL;
            }
          // fall through
          case 105: break;
          case 24:
            { yybegin(COMMENT);
          commentCount = 1;
            }
          // fall through
          case 106: break;
          case 25:
            { return LT_EQ;
            }
          // fall through
          case 107: break;
          case 26:
            { return EQ_EQ;
            }
          // fall through
          case 108: break;
          case 27:
            { return GT_EQ;
            }
          // fall through
          case 109: break;
          case 28:
            { return IF;
            }
          // fall through
          case 110: break;
          case 29:
            { return OR;
            }
          // fall through
          case 111: break;
          case 30:
            { commentCount--;
          if (commentCount == 0){
              yybegin(YYINITIAL);
          }
            }
          // fall through
          case 112: break;
          case 31:
            { commentCount++;
            }
          // fall through
          case 113: break;
          case 32:
            { return KEY;
            }
          // fall through
          case 114: break;
          case 33:
            { return AND;
            }
          // fall through
          case 115: break;
          case 34:
            { return NOT;
            }
          // fall through
          case 116: break;
          case 35:
            { return SET;
            }
          // fall through
          case 117: break;
          case 36:
            { return CALL;
            }
          // fall through
          case 118: break;
          case 37:
            { return CODE;
            }
          // fall through
          case 119: break;
          case 38:
            { return ELSE;
            }
          // fall through
          case 120: break;
          case 39:
            { return HOOK;
            }
          // fall through
          case 121: break;
          case 40:
            { return LOOP;
            }
          // fall through
          case 122: break;
          case 41:
            { return NULL;
            }
          // fall through
          case 123: break;
          case 42:
            { return REAL;
            }
          // fall through
          case 124: break;
          case 43:
            { return THEN;
            }
          // fall through
          case 125: break;
          case 44:
            { return TRUE;
            }
          // fall through
          case 126: break;
          case 45:
            { return TYPE;
            }
          // fall through
          case 127: break;
          case 46:
            { return ARRAY;
            }
          // fall through
          case 128: break;
          case 47:
            { return DEBUG;
            }
          // fall through
          case 129: break;
          case 48:
            { return ENDIF;
            }
          // fall through
          case 130: break;
          case 49:
            { return FALSE;
            }
          // fall through
          case 131: break;
          case 50:
            { return LOCAL;
            }
          // fall through
          case 132: break;
          case 51:
            { return TAKES;
            }
          // fall through
          case 133: break;
          case 52:
            { return ELSEIF;
            }
          // fall through
          case 134: break;
          case 53:
            { return HANDLE;
            }
          // fall through
          case 135: break;
          case 54:
            { return METHOD;
            }
          // fall through
          case 136: break;
          case 55:
            { return MODULE;
            }
          // fall through
          case 137: break;
          case 56:
            { return NATIVE;
            }
          // fall through
          case 138: break;
          case 57:
            { return PUBLIC;
            }
          // fall through
          case 139: break;
          case 58:
            { return RETURN;
            }
          // fall through
          case 140: break;
          case 59:
            { return STATIC;
            }
          // fall through
          case 141: break;
          case 60:
            { return STRING;
            }
          // fall through
          case 142: break;
          case 61:
            { return STRUCT;
            }
          // fall through
          case 143: break;
          case 62:
            { return BOOLEAN;
            }
          // fall through
          case 144: break;
          case 63:
            { return ENDLOOP;
            }
          // fall through
          case 145: break;
          case 64:
            { return EXTENDS;
            }
          // fall through
          case 146: break;
          case 65:
            { return GLOBALS;
            }
          // fall through
          case 147: break;
          case 66:
            { return INTEGER;
            }
          // fall through
          case 148: break;
          case 67:
            { return LIBRARY;
            }
          // fall through
          case 149: break;
          case 68:
            { return NOTHING;
            }
          // fall through
          case 150: break;
          case 69:
            { return PRIVATE;
            }
          // fall through
          case 151: break;
          case 70:
            { return RETURNS;
            }
          // fall through
          case 152: break;
          case 71:
            { return CONSTANT;
            }
          // fall through
          case 153: break;
          case 72:
            { return EXITWHEN;
            }
          // fall through
          case 154: break;
          case 73:
            { return FUNCTION;
            }
          // fall through
          case 155: break;
          case 74:
            { return OPTIONAL;
            }
          // fall through
          case 156: break;
          case 75:
            { return REQUIRES;
            }
          // fall through
          case 157: break;
          case 76:
            { return ENDMETHOD;
            }
          // fall through
          case 158: break;
          case 77:
            { return ENDMODULE;
            }
          // fall through
          case 159: break;
          case 78:
            { return ENDSTRUCT;
            }
          // fall through
          case 160: break;
          case 79:
            { return IMPLEMENT;
            }
          // fall through
          case 161: break;
          case 80:
            { return ENDGLOBALS;
            }
          // fall through
          case 162: break;
          case 81:
            { return ENDLIBRARY;
            }
          // fall through
          case 163: break;
          case 82:
            { return ENDFUNCTION;
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
