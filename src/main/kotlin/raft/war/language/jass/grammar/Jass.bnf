{
    parserClass="raft.war.language.jass.grammar.JassParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Jass"
    psiImplClassSuffix="Impl"
    psiPackage="raft.war.language.jass.psi"
    psiImplPackage="raft.war.language.jass.psi.impl"
    psiImplUtilClass="raft.war.language.jass.psi.JassPsiImplUtil"

    implements="raft.war.language.jass.psi.compositeElement.JassCompositeElement"
    extends="raft.war.language.jass.psi.compositeElement.JassCompositeElementImpl"

    elementTypeHolderClass="raft.war.language.jass.psi.JassTypes"
    elementTypeClass="raft.war.language.jass.psi.JassElementType"
    tokenTypeClass="raft.war.language.jass.psi.JassTokenType"

    generateTokenAccessors=true

    extends(".*Expr")=Expr
    name(".*Expr")='expression'

    tokens = [
        WHITE_SPACE='regexp:\s+'
        LINE_COMMENT="regexp://[^\n]*"

        AND='and'
        ARRAY='array'
        CALL='call'
        CONSTANT='constant'
        DEBUG='debug'
        ELSE='else'
        ELSEIF='elseif'
        ENDFUNCTION='endfunction'
        ENDIF='endif'
        ENDLOOP='endloop'
        ENDGLOBALS='endglobals'
        EXTENDS='extends'
        EXITWHEN='exitwhen'
        FALSE='false'
        FUNCTION='function'
        GLOBALS='globals'
        IF='if'
        LOCAL='local'
        LOOP='loop'
        NATIVE='native'
        NOT='not'
        NULL='null'
        OR='or'
        RETURNS='returns'
        RETURN='return'
        SET='set'
        TAKES='takes'
        THEN='then'
        TRUE='true'
        TYPE='type'

        COMMA=','
        EQ_EQ='=='
        EQ='='
        NEQ='!='
        LT_EQ='<='
        LT='<'
        GT_EQ='>='
        GT='>'
        PLUS='+'
        MINUS='-'
        MUL='*'
        DIV='/'
        LPAREN='('
        RPAREN=')'
        LBRACK='['
        RBRACK=']'

        REALVAL='regexp:\d+\.\d*|\.\d+'
        HEXVAL='regexp:(0x|\$)[0-9a-fA-F]+'
        INTVAL='regexp:\d+'
        RAWVAL="regexp:'[^']*'"
        STRVAL="regexp:\"([^\"\\]|\\.)*\""

        ID='regexp:[A-Za-z_][_0-9A-Za-z]*'
    ]
}

Root ::= RootItem*
private RootItem
    ::=
    TypeDef|
    Item
    //CallStmt
 //Nativ|
 //Glob|
 //Fun
    {recoverWhile=RootItemRecover}
private RootItemRecover ::= KeywordRecover !(ID)

// === STUB
FunName ::= ID {
    name=FunName

    extends=  "raft.war.language.jass.psi.funName.JassFunNameBaseImpl"
    stubClass="raft.war.language.jass.psi.funName.JassFunNameStub"

    implements="raft.war.language.jass.psi.JassNamedElement"
    elementTypeClass = "raft.war.language.jass.psi.funName.JassFunNameStubElementType"
}

VarName ::= ID {
    name = VarName

   extends=  "raft.war.language.jass.psi.varName.JassVarNameBaseImpl"
   stubClass="raft.war.language.jass.psi.varName.JassVarNameStub"

   implements="raft.war.language.jass.psi.JassNamedElement"
   elementTypeClass="raft.war.language.jass.psi.varName.JassVarNameStubElementType"
}

TypeName ::= ID {
    name=TypeName

   extends=  "raft.war.language.jass.psi.typeName.JassTypeNameBaseImpl"
   stubClass="raft.war.language.jass.psi.typeName.JassTypeNameStub"

   implements="raft.war.language.jass.psi.JassNamedElement"
   elementTypeClass="raft.war.language.jass.psi.typeName.JassTypeNameStubElementType"
}

// https://github.com/JetBrains/Grammar-Kit/blob/master/grammars/Grammar.bnf
// https://github.com/JetBrains/Grammar-Kit?tab=readme-ov-file#rule-modifiers

private KeywordRecover::= !(
    GLOBALS|ENDGLOBALS|
    FUNCTION|ENDFUNCTION|
    LOOP|ENDLOOP|EXITWHEN|
    IF|ELSE|ELSEIF|ENDIF|
    TYPE|EXTENDS|
    LOCAL|CONSTANT|SET|
    DEBUG|CALL|
    RETURN
    )

private ExprRecover ::= !(
    PLUS|MINUS|MUL|DIV|
    LT|LT_EQ|GT|GT_EQ|NOT|
    EQ|EQ_EQ|NEQ|
    LPAREN|RPAREN|
    LBRACK|RBRACK
)

// === type
TypeDef ::= TYPE TypeName TypeExt? {name=TypeDef pin=1}
TypeExt::= EXTENDS TypeName {name=TypeExt pin=1}

// === variable
Item ::= (CONSTANT|LOCAL|SET|DEBUG|CALL)* ID ARRAY? ID? (BrackExpr|(LPAREN RPAREN))* (EQ Expr)? {name=Item pin=2 recoverWhile=VarDefRecover}
private VarDefRecover ::= KeywordRecover ExprRecover !(ID)

// call
//FunCall ::= FunName LPAREN /*ArgList?*/ RPAREN {pin=2 name=FunCall}
//ArgList ::= Expr (COMMA Expr)* {name=ArgList}
//CallStmt ::= (DEBUG|CALL)* FunCall {pin=2 name=CallStmt recoverWhile=KeywordRecover}

// === globals
Globalz ::= GLOBALS Item* ENDGLOBALS {pin=1 name=Globalz}

Param ::= ((COMMA? Item)|(COMMA Item?)|TypeName) {recoverWhile=ParamRecover}
private ParamRecover ::= !(COMMA|StmtRecoverBody)

Takez ::= TAKES Param* {name=Takez recoverWhile=StmtRecover}

// === function
Returnz ::= RETURNS TypeName {name=Returnz}

Fun ::= FunHead FunBody ENDFUNCTION {name=Fun recoverWhile=RootRecover}
FunHead ::= CONSTANT? FUNCTION FunName? Takez? Returnz? {pin=2 name=FunHead}

Nativ ::= CONSTANT? NATIVE FunName? Takez? Returnz? {pin=2 name=Nativ}
FunBody ::= Stmt* {name=FunBody recoverWhile=StmtRecover}

// https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#22-using-recoverwhile-attribute

// === STATEMENT
Stmt
    ::= Item
    | ReturnStmt
    | IfStmt
    | LoopStmt
    | ExitWhenStmt
    {recoverWhile=StmtRecover name=Stmt}

private StmtRecoverBody ::=
ENDGLOBALS|CONSTANT|LOCAL|FUNCTION|ENDFUNCTION|RETURN|RETURNS|
    SET|DEBUG|CALL|LOCAL
    LOOP|ENDLOOP|EXITWHEN|
    IF|ELSEIF|ENDIF|ELSE|ID
private StmtRecover ::= !(StmtRecoverBody)

ReturnStmt ::= RETURN Expr? {pin=1 name=ReturnStmt}

IfStmt ::= IF Expr THEN? FunBody (ElseIfStmt|ElseStmt)* ENDIF {pin=1 name=IfStmt}
ElseIfStmt ::= ELSEIF Expr THEN? FunBody {pin=1 name=ElseIfStmt}
ElseStmt ::= ELSE FunBody {pin=1 name=ElseStmt}

LoopStmt ::= LOOP FunBody ENDLOOP {name=LoopStmt pin=1 recoverWhile=StmtRecover}
ExitWhenStmt ::=EXITWHEN Expr {pin=1 name=ExitWhenStmt}

// === EXPRESSION
// https://github.com/JetBrains/Grammar-Kit/blob/master/TUTORIAL.md
// https://github.com/JetBrains/Grammar-Kit/blob/master/testData/generator/ExprParser.bnf
// https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000094104-Expression-handling-in-grammar-kit-issue-with-deep-trees
// https://gist.github.com/FatalCatharsis/aad0b72c3ffed144c3d61ee73dcb283f

Expr ::=
    PlusExpr|MinusExpr|
    MulExpr|DivExpr|
    MulUnExpr|DivUnExpr|PlusUnExpr|MinusUnExpr|
    NotExpr |
    EqExpr|NeqExpr|LtExpr|LtEqExpr|GtExpr|GtEqExpr|
    OrExpr|AndExpr|
    PrimExpr {name=Expr}

PlusExpr ::= Expr PLUS Expr
MinusExpr ::= Expr MINUS Expr

MulExpr ::= Expr MUL Expr
DivExpr ::= Expr DIV Expr

MulUnExpr ::= MUL Expr {pin=1}
DivUnExpr ::= DIV Expr {pin=1}
PlusUnExpr ::= PLUS Expr {pin=1}
MinusUnExpr ::= MINUS Expr {pin=1}
NotExpr ::= NOT Expr {pin=1}

EqExpr ::= Expr EQ_EQ Expr
NeqExpr ::= Expr NEQ Expr
LtExpr ::= Expr LT Expr
LtEqExpr ::= Expr LT_EQ Expr
GtExpr ::= Expr GT Expr
GtEqExpr ::= Expr GT_EQ Expr

OrExpr ::= Expr OR Expr
AndExpr ::= Expr AND Expr
ParenExpr ::= LPAREN Expr RPAREN {pin=1}
BrackExpr ::= LBRACK Expr? RBRACK {pin=1}

Str ::= STRVAL {
    name = Str
    extends="raft.war.language.jass.psi.JassStrBaseImpl"
}

Num ::= INTVAL | REALVAL | HEXVAL | RAWVAL {name=Num}

PrimExpr ::=
    ParenExpr |
    BrackExpr |
    FunRef |
    FALSE|
    NULL|
    TRUE|
    Num |
    Str |
    Item {name=PrimExpr}

FunRef ::= FUNCTION FunName {pin=1 name=FunRef}
