{
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Zinc"
    psiImplClassSuffix="Impl"

    parserClass=              "guru.xgm.zinc.parser.ZincParser"
    psiPackage=               "guru.xgm.zinc.psi"
    psiImplPackage=           "guru.xgm.zinc.psi.impl"
    elementTypeHolderClass=   "guru.xgm.zinc.psi.ZincTypes"
    elementTypeClass=         "guru.xgm.zinc.psi.tree.ZincIElement"
    tokenTypeClass=           "guru.xgm.zinc.psi.tree.ZincIToken"

    extends(".*Expr")=Expr

    // if we regenerate the .flex lexer, change block comment to this:
    // BLOCK_COMMENT="/*" !([^]* "*/" [^]*) ("*/")?

    tokens=[
        WHITE_SPACE='regexp:\s+'
        SINGLE_LINE_COMMENT="regexp://[^\n]*"
        BLOCK_COMMENT='regexp:/\*(?:[^*]|\*(?!/))*\*+/'

        BOOLEAN='boolean'
        BREAK='break'
        CODE='code'
        CONSTANT='constant'
        DEBUG='debug'
        DO='do'
        ELSE='else'
        FALSE='false'
        FOR='for'
        FUNCTION='function'
        HANDLE='handle'
        IF='if'
        INTEGER='integer'
        KEY='key'
        LIBRARY='library'
        METHOD='method'
        NOTHING='nothing'
        NULL='null'
        OPTIONAL='optional'
        PRIVATE='private'
        PUBLIC='public'
        REAL='real'
        REQUIRES='requires'
        RETURN='return'
        STATIC='static'
        STRING='string'
        STRUCT='struct'
        TRUE='true'
        THISTYPE='thistype'
        WHILE='while'

        DOT='.'
        COMMA=','
        EQ_EQ='=='
        EQ='='
        NEQ='!='
        SEMI = ';'
        MINUS_GT = '->'
        AND_AND = '&&'
        OR_OR = '||'
        NOT='!'
        PLUS='+'
        PLUS_EQ='+='
        MINUS='-'
        MINUS_EQ='-='
        MUL='*'
        MUL_EQ='*='
        DIV='/'
        DIV_EQ='/='
        LT_EQ='<='
        LT='<'
        GT_EQ='>='
        GT='>'
        LBRACE = '{'
        RBRACE = '}'
        LPAREN = '('
        RPAREN = ')'
        LBRACK = '['
        RBRACK = ']'

        REALVAl='regexp:\d+\.\d*|\.\d+'
        HEXVAL='regexp:(0x|\$)[0-9a-fA-F]+'
        INTVAL='regexp:\d+'
        RAWVAl="regexp:'[^']*'"
        STRVAL="regexp:\"([^\"\\]|\\.)*\""

        ID='regexp:[A-Za-z_][_0-9A-Za-z]*'

    ]

}

// https://www.osti.gov/servlets/purl/1644738/

Root ::= (LibDef)* {recoverWhile=RootRecover}
private RootRecover ::= !(LIBRARY)

// === VISIBILITY
Vis ::= (PUBLIC|PRIVATE)

// === LIBRARY
LibDef ::= LIBRARY ID LibReq? LibBody {pin=1}
LibBody ::= LBRACE LibItem* RBRACE {pin=1}
LibItem ::= LibVisDef|GvarDef|FuncDef|StructDef
LibReq ::= REQUIRES LibReqItem (COMMA LibReqItem)* {pin=1}
LibReqItem ::= OPTIONAL? ID {pin=2}

// -- Lib Visible
LibVisDef ::= Vis (LibItem|LibBody)

// === GLOBALS
GvarDef ::= Vis? CONSTANT? TypeName GvarBody (COMMA GvarBody)* SEMI? {pin=3}
GvarBody ::= (ArrayAccess|ID) (EQ Expr)?

// === VARIABLE
TypeName ::= HANDLE|INTEGER|REAL|BOOLEAN|STRING|CODE|KEY|THISTYPE|ID
TypedVar ::= TypeName ID
TypedVarList ::= TypedVar (COMMA TypedVar)* {pin=1}

// === FUNCTION
Arg ::= Expr|FuncAsCode|FuncAnon
ArgList ::= Arg (COMMA Arg)*
FuncCallName ::= ID

FuncCall ::= FuncCallName LPAREN ArgList? RPAREN {pin=2}
FuncAnon ::= FUNCTION LPAREN TypedVarList? RPAREN FuncReturns? FuncBody {pin=2}
FuncDef ::= CONSTANT? FUNCTION FuncDefName LPAREN TypedVarList? RPAREN FuncReturns? FuncBody {pin=3}
FuncDefName ::= ID
FuncReturns ::= MINUS_GT (NOTHING|TypeName) {pin=1}
FuncBody ::= LBRACE Stmt* RBRACE {pin=1}

// === STRUCT
StructDef ::= STRUCT ID StructBody {pin=1}
private StructBody ::= LBRACE StructItem* RBRACE {pin=1}
private StructItem ::= GvarDef|MethodDef|StructVis|StructStat
MethodDef ::= Vis? STATIC? METHOD ID LPAREN TypedVarList? RPAREN FuncReturns? FuncBody {pin=3}
StructVis ::= Vis StructBody {pin=2}
StructStat ::= STATIC StructBody {pin=2}

// === STATEMENT
private Stmt ::=
     ForStmt|
    CallSetStmt
    | IfStmt
    | ReturnStmt
    | LvarStmt
    | DoStmt
    | WhileStmt
    | BreakStmt

BracedStmt ::= LBRACE Stmt* RBRACE {pin=1}

// -- call|set
SetOp ::= EQ|PLUS_EQ|MINUS_EQ|MUL_EQ|DIV_EQ
CallSetId ::= FuncCall|ArrayAccess|ID
CallSetStmt ::= (CALL|SET)? CallSetId (DOT CallSetId)* (SetOp Expr)? SEMI?

// -- local var
LvarStmt ::= TypeName LvarBody (COMMA LvarBody)* SEMI? {pin=2}
LvarBody ::= ID (EQ Expr)?

// -- for
ForOp ::= (LT|LT_EQ|GT|GT_EQ)
ForStmt ::= FOR ForHead (Stmt|BracedStmt) {pin=1}
ForExpr ::= PrimaryExpr
ForHead ::= LPAREN ForExpr ForOp ID ForOp ForExpr RPAREN {pin=1}

// -- do
DoStmt ::= DO (Stmt|BracedStmt) WHILE LPAREN Expr RPAREN SEMI? {pin=1}
BreakStmt ::= BREAK SEMI? {pin=1}

// -- while
WhileStmt ::= WHILE LPAREN Expr RPAREN (Stmt|BracedStmt) {pin=1}

// -- return
ReturnStmt ::= RETURN Expr? SEMI? {pin=1}

// -- if
IfStmt ::= IF LPAREN Expr RPAREN (Stmt|BracedStmt) ElseStmt?  {pin=1}
ElseStmt ::= ELSE (Stmt|BracedStmt) {pin=1}

// === EXPRESSION
// https://github.com/JetBrains/Grammar-Kit/blob/master/TUTORIAL.md
// https://github.com/JetBrains/Grammar-Kit/blob/master/testData/generator/ExprParser.bnf
// https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000094104-Expression-handling-in-grammar-kit-issue-with-deep-trees
// https://gist.github.com/FatalCatharsis/aad0b72c3ffed144c3d61ee73dcb283f

Expr ::=
    AddGroup |
    MulGroup |
    UnaryGroup |
    CmpGroup |
    OrExpr |
    AndExpr |
    PrimaryExpr |
    DotExpr

DotExpr ::= Expr DOT Expr

private AddGroup ::= PlusExpr | MinusExpr
PlusExpr ::= Expr PLUS Expr
MinusExpr ::= Expr MINUS Expr

private MulGroup ::= MulExpr | DivExpr
MulExpr ::= Expr MUL Expr
DivExpr ::= Expr DIV Expr

private UnaryGroup ::=
    MulUnaryExpr |
    DivUnaryExpr |
    PlusUnaryExpr |
    MinusUnaryExpr |
    NotExpr

MulUnaryExpr ::= MUL Expr
DivUnaryExpr ::= DIV Expr
PlusUnaryExpr ::= PLUS Expr
MinusUnaryExpr ::= MINUS Expr
NotExpr ::= NOT Expr

private CmpGroup ::=
    EqExpr |
    NEqExpr |
    LTExpr |
    LTEqExpr |
    GTExpr |
    GTEqExpr

EqExpr ::= Expr EQ_EQ Expr
NEqExpr ::= Expr NEQ Expr
LTExpr ::= Expr LT Expr
LTEqExpr ::= Expr LT_EQ Expr
GTExpr ::= Expr GT Expr
GTEqExpr ::= Expr GT_EQ Expr

OrExpr ::= Expr OR_OR Expr
AndExpr ::= Expr AND_AND Expr
ParenExpr ::= LPAREN Expr RPAREN

PrimaryExpr ::=
    FALSE |
    NULL |
    TRUE |
    ParenExpr |
    ArrayAccess |
    FuncCall |
    FuncAsCode |
    REALVAL |
    HEXVAL |
    INTVAL |
    RAWVAL |
    STRVAL |
    ID

ArrayAccess ::= ID ArrayAccessItem ArrayAccessItem*
ArrayAccessItem ::= LBRACK Expr? RBRACK {pin=1}
FuncAsCode ::= FUNCTION FuncCallName {pin=2}

