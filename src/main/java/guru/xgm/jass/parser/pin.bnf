// https://github.com/JetBrains/Grammar-Kit/blob/master/TUTORIAL.md
{
  tokens=[
    SEMI=';'
    EQ='='
    LP='('
    RP=')'

    space='regexp:\s+'
    comment='regexp://.*'
    number='regexp:\d+(\.\d*)?'
    id='regexp:\p{Alpha}\w*'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

    op_1='+'
    op_2='-'
    op_3='*'
    op_4='/'
    op_5='!'
  ]

  extends(".*Expression")=expression
}

root ::= propertyWrapper *

private propertyWrapper ::= !<<eof>> property ';' {pin=1 recoverWhile=propertyRecover}
property ::= id '=' expression  {pin=2}
private propertyRecover ::= !(';' | id EQ)

expression ::= factor plusExpression *
left plusExpression ::= plusOpertor factor
private plusOpertor ::= '+'|'-'
private factor ::= primary mulExpression *
left mulExpression  ::= mul_op primary
private mul_op ::= '*'|'/'
private primary ::= primary_inner factorialExpression ?
left factorialExpression ::= '!'
private primary_inner ::= literalExpression | refExpression | parenExpression
parenExpression ::= '(' expression ')' {pin=1}
refExpression ::= id
literalExpression ::= number | string | float
