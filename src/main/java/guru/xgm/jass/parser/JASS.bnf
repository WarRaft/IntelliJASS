{
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="JASS"
    psiImplClassSuffix="Impl"

    parserClass=              "guru.xgm.jass.parser.JASSParser"

    psiPackage=               "guru.xgm.jass.psi"
    psiImplPackage=           "guru.xgm.jass.psi.impl"
    elementTypeHolderClass=   "guru.xgm.jass.psi.TypesJASS"
    elementTypeClass=         "guru.xgm.jass.psi.tree.IElementTypeJASS_Element"
    tokenTypeClass=           "guru.xgm.jass.psi.tree.IElementTypeJASS_Token"

    extends(".*Expr")=Expression

    tokens = [
        WHITE_SPACE='regexp:\s+'
        SINGLE_LINE_COMMENT="regexp://[^\n]*"

        CONSTANT='constant'
        NATIVE='native'
        TAKES='takes'
        RETURNS='returns'
        NOTHING='nothing'
        GLOBALS='globals'
        ENDGLOBALS='endglobals'
        FUNCTION='function'
        ENDFUNCTION='endfunction'
        ARRAY='array'
        AND='and'
        OR='or'
        NOT='not'
        COMMA=','
        EQ='='
        NEQ='!='
        LT='<'
        LTEQ='<='
        GT='>'
        GTEQ='>='
        PLUS='+'
        MINUS='-'
        MUL='*'
        DIV='/'
        LP='('
        RP=')'
        LB='['
        RB=']'
        LT='<'
        GT='>'

        TYPE='type'
        EXTENDS='extends'
        SET='set'

        REAL='regexp:\d+\.\d*|\.\d+'
        INTEGER='regexp:\d+'
        HEX='regexp:(0x|\$)[0-9a-fA-F]+'
        STRING="regexp:\"([^\"\\]|\\.)*\""
        RAWCODE="regexp:'[^']*'"

        ID='regexp:[A-Za-z_][_0-9A-Za-z]*'
    ]
}

root ::= (property)*

property ::= ID EQ Expression {pin=2}
// === DECLARATION



// === EXPRESSION
// https://github.com/JetBrains/Grammar-Kit/blob/master/TUTORIAL.md
// https://github.com/JetBrains/Grammar-Kit/blob/master/testData/generator/ExprParser.bnf
// https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000094104-Expression-handling-in-grammar-kit-issue-with-deep-trees

Expression ::=
    AddGroup |
    MulGroup |
    UnaryGroup |
    ComparsionGroup |
    OrExpr |
    AndExpr |
    PrimaryExpr

private AddGroup ::= PlusExpr | MinusExpr
PlusExpr ::= Expression PLUS Expression
MinusExpr ::= Expression MINUS Expression

private MulGroup ::= MulExpr | DivExpr
MulExpr ::= Expression MUL Expression
DivExpr ::= Expression DIV Expression

private UnaryGroup ::=
    MulUnaryExpr |
    DivUnaryExpr |
    PlusUnaryExpr |
    MinusUnaryExpr |
    NotExpr

MulUnaryExpr ::= MUL Expression
DivUnaryExpr ::= DIV Expression
PlusUnaryExpr ::= PLUS Expression
MinusUnaryExpr ::= MINUS Expression
NotExpr ::= NOT Expression

private ComparsionGroup ::=
    EqualExpr |
    NotEqualsExpr |
    LessThanExpr |
    LessThanEqualsExpr |
    GreaterThanExpr |
    GreaterThanEqualsExpr

EqualExpr ::= Expression EQ Expression
NotEqualsExpr ::= Expression NEQ Expression
LessThanExpr ::= Expression LT Expression
LessThanEqualsExpr ::= Expression LTEQ Expression
GreaterThanExpr ::= Expression GT Expression
GreaterThanEqualsExpr ::= Expression GTEQ Expression

OrExpr ::= Expression OR Expression
AndExpr ::= Expression AND Expression

PrimaryExpr ::=
    ArrayLiteral |
    FunctionLiteral |
    ID |
    REAL |
    STRING

ArrayLiteral ::= ID LB Expression RB
FunctionLiteral ::= ID LP Expression (COMMA Expression)* RP
