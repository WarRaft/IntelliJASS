{
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="JASS"
    psiImplClassSuffix="Impl"

    parserClass=              "guru.xgm.jass.lang.PsiParserJASS"
    psiPackage=               "guru.xgm.jass.psi"
    psiImplPackage=           "guru.xgm.jass.psi.impl"
    elementTypeHolderClass=   "guru.xgm.jass.psi.TypesJASS"
    elementTypeClass=         "guru.xgm.jass.psi.tree.IElementTypeJASS_Element"
    tokenTypeClass=           "guru.xgm.jass.psi.tree.IElementTypeJASS_Token"

    extends(".*Expression")=expression

    tokens = [
        WHITE_SPACE='regexp:\s+'
        SINGLE_LINE_COMMENT="regexp://[^\n]*"

        EQ='='
        PLUS='+'
        MINUS='-'
        MUL='*'
        DIV='/'
        LP='('
        RP=')'
        LT='<'
        GT='>'

        TYPE='type'
        EXTENDS='extends'

        number='regexp:\d+(\.\d*)?'
        string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

        ID='regexp:[A-Za-z_][_0-9A-Za-z]*'
    ]
}

root ::= (typeDeclaration|property)*

property ::= ID EQ expression {pin=2}

// === EXPRESSION
// https://github.com/JetBrains/Grammar-Kit/blob/master/TUTORIAL.md
expression ::= addition

private addition ::=multiplication plusExpression*
left plusExpression ::= plusOperator multiplication

private multiplication ::= primary mulExpression*
left mulExpression  ::= mulOperator primary

private primary ::= MINUS? primaryInner

private mulOperator ::= MUL|DIV
private plusOperator ::= PLUS|MINUS

private primaryInner ::= literalExpression | refExpression | parenExpression
parenExpression ::= LP expression RP {pin=1}
refExpression ::= id
literalExpression ::= number | string | float

// === DECLARATION
typeDeclaration ::= TYPE ID EXTENDS ID
