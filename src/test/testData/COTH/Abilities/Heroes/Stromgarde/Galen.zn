//! zinc

library GalenAbils requires CothUtilities {

  constant integer blisteringBlade = 'A07I';
  constant integer galenId = 'H01I';
  constant key blisteringBladeTimerKey;
  constant key blisteringBladeTimerGalenKey;
  constant real blisteringBladeDuration = 10.0;
  constant integer blisteringBladeSplash = 'A06M';

  //* Desperation is handled in "unit-damaging-event-handler.zn"


  timer tempTimer[10];
  trigger tempTrigger[10];
  group tempGroup[10];
  unit tempUnit[10];

  function onInit()  -> nothing {
    trigger onSpellEffect = CreateTrigger();
    trigger onSpellLearn = CreateTrigger();
    TriggerRegisterAnyUnitEventBJ(onSpellEffect, EVENT_PLAYER_UNIT_SPELL_EFFECT);
    TriggerAddCondition(onSpellEffect, Filter(function() -> boolean {
      return GetUnitTypeId(GetTriggerUnit()) == galenId;
    }));
    TriggerAddAction(onSpellEffect, function(){
      unit caster = GetTriggerUnit();
      integer castedSpellId = GetSpellAbilityId();
      if (castedSpellId == blisteringBlade) {
        UnitRemoveAbility(caster, blisteringBladeSplash);
        UnitAddAbility(caster, blisteringBladeSplash);
        SetUnitAbilityLevel(caster, blisteringBladeSplash, GetUnitAbilityLevel(caster, castedSpellId));
        tempTimer[0] = LoadTimerHandle(abilityData, GetHandleId(caster), blisteringBladeTimerKey);
        DestroyTimer(tempTimer[0]);
        tempTimer[0] = CreateTimer();
        SaveTimerHandle(abilityData, GetHandleId(caster), blisteringBladeTimerKey, tempTimer[0]);
        SaveUnitHandle(abilityData, GetHandleId(tempTimer[0]), blisteringBladeTimerGalenKey, caster);
        TimerStart(tempTimer[0], blisteringBladeDuration, false, function(){
          unit galen = LoadUnitHandle(abilityData, GetHandleId(GetExpiredTimer()), blisteringBladeTimerGalenKey);
          UnitRemoveAbility(galen, blisteringBladeSplash);
          RemoveSavedHandle(abilityData, GetHandleId(galen), blisteringBladeTimerKey);
          FlushChildHashtable(abilityData, GetHandleId(GetExpiredTimer()));
          DestroyTimer(GetExpiredTimer());
        });
        tempTimer[0] = null;
      }
      if (castedSpellId == disarm) {
        tempGroup[0] = CreateGroup();
        GroupEnumUnitsInRange(tempGroup[0], GetSpellTargetX(), GetSpellTargetY(), 250, null);
        while (FirstOfGroup(tempGroup[0]) != null) {
          tempUnit[0] = FirstOfGroup(tempGroup[0]);
          GroupRemoveUnit(tempGroup[0], tempUnit[0]);
          if (IsUnitInRangeXY(tempUnit[0], GetSpellTargetX(), GetSpellTargetY(), 180) &&
             !IsUnitType(tempUnit[0], UNIT_TYPE_MAGIC_IMMUNE) &&
             IsUnitEnemy(tempUnit[0], GetOwningPlayer(caster)) && 
             !IsUnitType(tempUnit[0], UNIT_TYPE_MECHANICAL)) {
              UnitDamageTarget(caster, tempUnit[0], (65 + GetUnitAbilityLevel(caster, disarm) * 65), true, true, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS);
            }
        }
      }
    });
    TriggerRegisterAnyUnitEventBJ(onSpellLearn, EVENT_PLAYER_HERO_SKILL);
    TriggerAddCondition(onSpellLearn, Filter(function() -> boolean {
      return GetUnitTypeId(GetTriggerUnit()) == galenId;
    }));
    TriggerAddAction(onSpellLearn, function(){
      integer learnedSpell = GetLearnedSkill();
      integer learnedSpellLevel = GetLearnedSkillLevel();
      unit galen = GetTriggerUnit();
    });
  }
}

//! endzinc